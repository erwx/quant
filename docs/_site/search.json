[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "EDUC 8230",
    "section": "",
    "text": "Labs\nLab 1\nLab 2\n\n\nProblem Sets\nPSET 1 Practice\n\n\nExtras\nWorking with Files and Directories\n\n\nTextbook\nFundamentals of Statistical Reasoning in Education 4th Edition\n\n\nResources\nThe Book of R"
  },
  {
    "objectID": "pset_01.html",
    "href": "pset_01.html",
    "title": "PSET 1 Practice",
    "section": "",
    "text": "This lesson will teach you how to calculate descriptive statistics and create visualizations in R. You’ll learn the skills needed for exploring and summarizing data, including measures of central tendency, variability, and creating basic visualizations.\nWe’ll work with the built-in mtcars dataset.\n\n# Load and examine the mtcars dataset\ndata(mtcars)\nhead(mtcars)\n\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n\nstr(mtcars)\n\n'data.frame':   32 obs. of  11 variables:\n $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...\n $ disp: num  160 160 108 258 360 ...\n $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...\n $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n $ qsec: num  16.5 17 18.6 19.4 17 ...\n $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...\n $ am  : num  1 1 1 0 0 0 0 0 0 0 ...\n $ gear: num  4 4 4 3 3 3 3 4 4 4 ...\n $ carb: num  4 4 1 1 2 1 4 2 2 4 ...\n\n\n\n\n\nYou’ll often need to calculate means for an entire dataset and for specific subgroups. Let’s practice both.\n\n\n\n# Calculate the mean horsepower for all cars\nmean_hp_all &lt;- mean(mtcars$hp)\nmean_hp_all\n\n[1] 146.6875\n\n\n\n\n\nTo calculate means for specific groups, we use logical indexing to filter the data:\n\n# Calculate mean horsepower for manual transmission cars (am = 1)\nmanual_cars &lt;- mtcars$hp[mtcars$am == 1]\nmean_hp_manual &lt;- mean(manual_cars)\nmean_hp_manual\n\n[1] 126.8462\n\n# Alternative approach using logical indexing directly\nmean_hp_manual_alt &lt;- mean(mtcars$hp[mtcars$am == 1])\nmean_hp_manual_alt\n\n[1] 126.8462\n\n# Calculate mean horsepower for automatic transmission cars (am = 0)\nmean_hp_automatic &lt;- mean(mtcars$hp[mtcars$am == 0])\nmean_hp_automatic\n\n[1] 160.2632\n\n\n\n\n\n\nLet’s learn how to calculate mean, median, mode, standard deviation, and range.\n\n\n\n# Mean - average value\nmean(mtcars$mpg)\n\n[1] 20.09062\n\n# Median - middle value when data is ordered\nmedian(mtcars$mpg)\n\n[1] 19.2\n\n# Standard deviation - measure of variability\nsd(mtcars$mpg)\n\n[1] 6.026948\n\n# Minimum and maximum values\nmin(mtcars$mpg)\n\n[1] 10.4\n\nmax(mtcars$mpg)\n\n[1] 33.9\n\n# Range - difference between max and min\nrange(mtcars$mpg)  # This gives min and max\n\n[1] 10.4 33.9\n\nmax(mtcars$mpg) - min(mtcars$mpg)  # This gives the range as a single number\n\n[1] 23.5\n\n\n\n\n\nR doesn’t have a built-in mode function, so we need to create one or use the table() function:\n\n# Find the mode using table() - most frequent value\ncyl_table &lt;- table(mtcars$cyl)\ncyl_mode &lt;- as.numeric(names(cyl_table)[cyl_table == max(cyl_table)])\ncyl_mode\n\n[1] 8\n\n# Alternative: Create a mode function\nget_mode &lt;- function(x) {\n  freq_table &lt;- table(x)\n  mode_value &lt;- names(freq_table)[freq_table == max(freq_table)]\n  return(as.numeric(mode_value))\n}\n\n# Test our function\nget_mode(mtcars$cyl)  # Number of cylinders should have a clear mode\n\n[1] 8\n\n\n\n\n\nLet’s create a table with all descriptive statistics for multiple variables:\n\n# Function to calculate all statistics for a variable\ncalc_stats &lt;- function(x, var_name) {\n  mean_val &lt;- round(mean(x, na.rm = TRUE), 2)\n  median_val &lt;- round(median(x, na.rm = TRUE), 2)\n  sd_val &lt;- round(sd(x, na.rm = TRUE), 2)\n  min_val &lt;- round(min(x, na.rm = TRUE), 2)\n  max_val &lt;- round(max(x, na.rm = TRUE), 2)\n\n  return(data.frame(\n    Variable = var_name,\n    Mean = mean_val,\n    Median = median_val,\n    SD = sd_val,\n    Min = min_val,\n    Max = max_val\n  ))\n}\n\n# Calculate statistics for multiple variables\nstats_mpg &lt;- calc_stats(mtcars$mpg, \"MPG\")\nstats_hp &lt;- calc_stats(mtcars$hp, \"Horsepower\")\nstats_wt &lt;- calc_stats(mtcars$wt, \"Weight\")\nstats_cyl &lt;- calc_stats(mtcars$cyl, \"Cylinders\")\n\n# Combine into one table\ndescriptive_table &lt;- rbind(stats_mpg, stats_hp, stats_wt, stats_cyl)\nprint(descriptive_table)\n\n    Variable   Mean Median    SD   Min    Max\n1        MPG  20.09  19.20  6.03 10.40  33.90\n2 Horsepower 146.69 123.00 68.56 52.00 335.00\n3     Weight   3.22   3.33  0.98  1.51   5.42\n4  Cylinders   6.19   6.00  1.79  4.00   8.00\n\n\n\n\n\nR also provides convenient summary functions:\n\n# Summary function gives quartiles and mean\nsummary(mtcars$mpg)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  10.40   15.43   19.20   20.09   22.80   33.90 \n\n# For multiple variables at once\nsummary(mtcars[c(\"mpg\", \"hp\", \"wt\", \"cyl\")])\n\n      mpg              hp              wt             cyl       \n Min.   :10.40   Min.   : 52.0   Min.   :1.513   Min.   :4.000  \n 1st Qu.:15.43   1st Qu.: 96.5   1st Qu.:2.581   1st Qu.:4.000  \n Median :19.20   Median :123.0   Median :3.325   Median :6.000  \n Mean   :20.09   Mean   :146.7   Mean   :3.217   Mean   :6.188  \n 3rd Qu.:22.80   3rd Qu.:180.0   3rd Qu.:3.610   3rd Qu.:8.000  \n Max.   :33.90   Max.   :335.0   Max.   :5.424   Max.   :8.000  \n\n\n\n\n\n\nSkewness describes the asymmetry of a distribution. You can identify skewed variables by comparing the mean and median:\n\n# Compare mean and median for different variables\nvariables_to_check &lt;- c(\"mpg\", \"hp\", \"wt\", \"qsec\")\n\nfor (var in variables_to_check) {\n  var_mean &lt;- round(mean(mtcars[[var]]), 2)\n  var_median &lt;- round(median(mtcars[[var]]), 2)\n  difference &lt;- round(var_mean - var_median, 2)\n\n  cat(\"Variable:\", var, \"\\n\")\n  cat(\"Mean:\", var_mean, \"| Median:\", var_median, \"| Difference:\", difference, \"\\n\")\n\n  if (abs(difference) &gt; 0.5) {\n    if (difference &gt; 0) {\n      cat(\"This variable appears RIGHT SKEWED (mean &gt; median)\\n\")\n    } else {\n      cat(\"This variable appears LEFT SKEWED (mean &lt; median)\\n\")\n    }\n  } else {\n    cat(\"This variable appears roughly SYMMETRIC\\n\")\n  }\n  cat(\"\\n\")\n}\n\nVariable: mpg \nMean: 20.09 | Median: 19.2 | Difference: 0.89 \nThis variable appears RIGHT SKEWED (mean &gt; median)\n\nVariable: hp \nMean: 146.69 | Median: 123 | Difference: 23.69 \nThis variable appears RIGHT SKEWED (mean &gt; median)\n\nVariable: wt \nMean: 3.22 | Median: 3.33 | Difference: -0.11 \nThis variable appears roughly SYMMETRIC\n\nVariable: qsec \nMean: 17.85 | Median: 17.71 | Difference: 0.14 \nThis variable appears roughly SYMMETRIC\n\n\nWhen mean &gt; median, the distribution is right-skewed (has a long tail extending to the right). When mean &lt; median, the distribution is left-skewed.\n\n\n\nHistograms show the distribution of continuous variables.\n\n\n\n# Basic histogram\nhist(mtcars$mpg,\n     main = \"Distribution of Miles Per Gallon\",\n     xlab = \"Miles Per Gallon (mpg)\",\n     ylab = \"Frequency\",\n     col = \"hot pink\",\n     border = \"black\")\n\n\n\n\n\n\n\n\n\n\n\n\n# Fancy histogram\nhist(mtcars$mpg,\n     main = \"Distribution of Fuel Efficiency in Motor Trend Cars\",\n     xlab = \"Miles Per Gallon (mpg)\",\n     ylab = \"Number of Cars\",\n     col = \"#CFB87C\", # CU Gold\n     border = \"#565A5C\", # CU Dark Gray\n     breaks = 8,  # Control number of bins\n     las = 1)     # Horizontal y-axis labels\n\n# Add a vertical line for the mean\nabline(v = mean(mtcars$mpg), col = \"black\", lwd = 2, lty = 2)\nlegend(\n  \"topright\",\n  legend = paste(\"Mean =\", round(mean(mtcars$mpg), 1)),\n  lty = 2,\n  lwd = 2\n)\n\n\n\n\n\n\n\n\n\n\n\n\n# Create histogram and analyze shape\nhist(mtcars$hp,\n     main = \"Distribution of Horsepower\",\n     xlab = \"Horsepower (hp)\",\n     ylab = \"Frequency\",\n     col = \"lightcoral\",\n     border = \"darkred\",\n     breaks = 10)\n\n# Add mean and median lines\nabline(v = mean(mtcars$hp), col = \"blue\", lwd = 2, lty = 1)\nabline(v = median(mtcars$hp), col = \"green\", lwd = 2, lty = 2)\nlegend(\"topright\",\n       legend = c(paste(\"Mean =\", round(mean(mtcars$hp), 1)),\n                  paste(\"Median =\", round(median(mtcars$hp), 1))),\n       col = c(\"blue\", \"green\"),\n       lty = c(1, 2),\n       lwd = 2)\n\n\n\n\n\n\n\n\n\n\n\n\nBoxplots show the distribution’s five-number summary and help identify outliers:\n\n\n\n# Basic boxplot\nboxplot(mtcars$mpg,\n        main = \"Distribution of Miles Per Gallon\",\n        ylab = \"Miles Per Gallon (mpg)\",\n        col = \"#CFB87C\",\n        border = \"black\")\n\n\n\n\n\n\n\n\n\n\n\n\n# Identify outliers using the IQR method\nQ1 &lt;- quantile(mtcars$mpg, 0.25)\nQ3 &lt;- quantile(mtcars$mpg, 0.75)\nIQR_mpg &lt;- Q3 - Q1\n\n# Calculate outlier boundaries\nlower_bound &lt;- Q1 - 1.5 * IQR_mpg\nupper_bound &lt;- Q3 + 1.5 * IQR_mpg\n\n# Find outliers\noutliers &lt;- mtcars$mpg[mtcars$mpg &lt; lower_bound | mtcars$mpg &gt; upper_bound]\n\ncat(\"Outlier boundaries: [\", round(lower_bound, 2), \",\", round(upper_bound, 2), \"]\\n\")\n\nOutlier boundaries: [ 4.36 , 33.86 ]\n\ncat(\"Outliers found:\", outliers, \"\\n\")\n\nOutliers found: 33.9 \n\ncat(\"Number of outliers:\", length(outliers), \"\\n\")\n\nNumber of outliers: 1 \n\n\n\n\n\n\nFor categorical variables, use bar plots instead of histograms:\n\n\n\n# Create a frequency table first\ncyl_freq &lt;- table(mtcars$cyl)\ncyl_freq\n\n\n 4  6  8 \n11  7 14 \n\n# Create bar plot\nbarplot(cyl_freq,\n        main = \"Distribution of Engine Cylinders\",\n        xlab = \"Number of Cylinders\",\n        ylab = \"Number of Cars\",\n        col = c(\"coral\", \"lightgreen\", \"skyblue\"),\n        border = \"black\")\n\n\n\n\n\n\n\n\n\n\n\n\n# Horizontal bar plot\nbarplot(cyl_freq,\n        main = \"Engine Cylinder Distribution\",\n        xlab = \"Number of Cars\",\n        ylab = \"Number of Cylinders\",\n        col = \"orange\",\n        horiz = TRUE,\n        las = 1)\n\n\n\n\n\n\n\n\n\n\n\n\nSometimes you need to calculate statistics the hard way to understand the formulas. Let’s practice with a small dataset:\n\n# Small dataset for manual calculation practice\nvalues &lt;- c(4, 10, 9, 13, 7)\nvalues\n\n[1]  4 10  9 13  7\n\n# Calculate mean manually\nmean_manual &lt;- sum(values) / length(values)\ncat(\"Manual mean calculation:\", mean_manual, \"\\n\")\n\nManual mean calculation: 8.6 \n\ncat(\"R mean function:\", mean(values), \"\\n\")\n\nR mean function: 8.6 \n\n# Calculate median manually\nsorted_values &lt;- sort(values)\nn &lt;- length(values)\nif (n %% 2 == 1) {\n  median_manual &lt;- sorted_values[(n + 1) / 2]\n} else {\n  median_manual &lt;- (sorted_values[n/2] + sorted_values[n/2 + 1]) / 2\n}\ncat(\"Manual median calculation:\", median_manual, \"\\n\")\n\nManual median calculation: 9 \n\ncat(\"R median function:\", median(values), \"\\n\")\n\nR median function: 9 \n\n# Calculate standard deviation manually\nmean_val &lt;- mean(values)\nsquared_deviations &lt;- (values - mean_val)^2\nvariance_manual &lt;- sum(squared_deviations) / (length(values) - 1)  # Sample variance\nsd_manual &lt;- sqrt(variance_manual)\ncat(\"Manual SD calculation:\", round(sd_manual, 4), \"\\n\")\n\nManual SD calculation: 3.3615 \n\ncat(\"R sd function:\", round(sd(values), 4), \"\\n\")\n\nR sd function: 3.3615 \n\n\n\n\n\n# Add an outlier and see the effect\nvalues_with_outlier &lt;- c(4, 10, 9, 13, 7, 138)\n\n# Compare statistics\ncat(\"Original data: 4, 10, 9, 13, 7\\n\")\n\nOriginal data: 4, 10, 9, 13, 7\n\ncat(\"Mean:\", round(mean(values), 2), \"| Median:\", median(values), \"| SD:\", round(sd(values), 2), \"\\n\\n\")\n\nMean: 8.6 | Median: 9 | SD: 3.36 \n\ncat(\"With outlier: 4, 10, 9, 13, 7, 138\\n\")\n\nWith outlier: 4, 10, 9, 13, 7, 138\n\ncat(\"Mean:\", round(mean(values_with_outlier), 2), \"| Median:\", median(values_with_outlier), \"| SD:\", round(sd(values_with_outlier), 2), \"\\n\\n\")\n\nMean: 30.17 | Median: 9.5 | SD: 52.91 \n\ncat(\"The outlier dramatically affects the mean and standard deviation.\\n\")\n\nThe outlier dramatically affects the mean and standard deviation.\n\n\n\n\n\n\n\nUse mean() for averages - add na.rm = TRUE if data has missing values\nFilter data using logical indexing: data$variable[data$group == \"value\"]\nCompare mean and median to identify skewed distributions\nUse histograms for continuous data, bar plots for categorical data\nThe standard deviation measures variability - larger values indicate more spread\nOutliers strongly affect mean and SD but have little effect on median\nAlways add titles and axis labels to make graphs interpretable\nRound results appropriately for professional presentation"
  },
  {
    "objectID": "pset_01.html#introduction",
    "href": "pset_01.html#introduction",
    "title": "PSET 1 Practice",
    "section": "",
    "text": "This lesson will teach you how to calculate descriptive statistics and create visualizations in R. You’ll learn the skills needed for exploring and summarizing data, including measures of central tendency, variability, and creating basic visualizations.\nWe’ll work with the built-in mtcars dataset.\n\n# Load and examine the mtcars dataset\ndata(mtcars)\nhead(mtcars)\n\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n\nstr(mtcars)\n\n'data.frame':   32 obs. of  11 variables:\n $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...\n $ disp: num  160 160 108 258 360 ...\n $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...\n $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n $ qsec: num  16.5 17 18.6 19.4 17 ...\n $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...\n $ am  : num  1 1 1 0 0 0 0 0 0 0 ...\n $ gear: num  4 4 4 3 3 3 3 4 4 4 ...\n $ carb: num  4 4 1 1 2 1 4 2 2 4 ..."
  },
  {
    "objectID": "pset_01.html#calculating-means-for-different-groups",
    "href": "pset_01.html#calculating-means-for-different-groups",
    "title": "PSET 1 Practice",
    "section": "",
    "text": "You’ll often need to calculate means for an entire dataset and for specific subgroups. Let’s practice both.\n\n\n\n# Calculate the mean horsepower for all cars\nmean_hp_all &lt;- mean(mtcars$hp)\nmean_hp_all\n\n[1] 146.6875\n\n\n\n\n\nTo calculate means for specific groups, we use logical indexing to filter the data:\n\n# Calculate mean horsepower for manual transmission cars (am = 1)\nmanual_cars &lt;- mtcars$hp[mtcars$am == 1]\nmean_hp_manual &lt;- mean(manual_cars)\nmean_hp_manual\n\n[1] 126.8462\n\n# Alternative approach using logical indexing directly\nmean_hp_manual_alt &lt;- mean(mtcars$hp[mtcars$am == 1])\nmean_hp_manual_alt\n\n[1] 126.8462\n\n# Calculate mean horsepower for automatic transmission cars (am = 0)\nmean_hp_automatic &lt;- mean(mtcars$hp[mtcars$am == 0])\nmean_hp_automatic\n\n[1] 160.2632"
  },
  {
    "objectID": "pset_01.html#comprehensive-descriptive-statistics",
    "href": "pset_01.html#comprehensive-descriptive-statistics",
    "title": "PSET 1 Practice",
    "section": "",
    "text": "For thorough data analysis, you need to calculate multiple descriptive statistics. Let’s learn how to calculate mean, median, mode, standard deviation, and range.\n\n\n\n# Mean - average value\nmean(mtcars$mpg)\n\n[1] 20.09062\n\n# Median - middle value when data is ordered\nmedian(mtcars$mpg)\n\n[1] 19.2\n\n# Standard deviation - measure of variability\nsd(mtcars$mpg)\n\n[1] 6.026948\n\n# Minimum and maximum values\nmin(mtcars$mpg)\n\n[1] 10.4\n\nmax(mtcars$mpg)\n\n[1] 33.9\n\n# Range - difference between max and min\nrange(mtcars$mpg)  # This gives min and max\n\n[1] 10.4 33.9\n\nmax(mtcars$mpg) - min(mtcars$mpg)  # This gives the range as a single number\n\n[1] 23.5\n\n\n\n\n\nR doesn’t have a built-in mode function, so we need to create one or use the table() function:\n\n# Find the mode using table() - most frequent value\nmpg_table &lt;- table(mtcars$mpg)\nmpg_mode &lt;- as.numeric(names(mpg_table)[mpg_table == max(mpg_table)])\nmpg_mode\n\n[1] 10.4 15.2 19.2 21.0 21.4 22.8 30.4\n\n# Alternative: Create a mode function\nget_mode &lt;- function(x) {\n  freq_table &lt;- table(x)\n  mode_value &lt;- names(freq_table)[freq_table == max(freq_table)]\n  return(as.numeric(mode_value))\n}\n\n# Test our function\nget_mode(mtcars$cyl)  # Number of cylinders should have a clear mode\n\n[1] 8\n\n\n\n\n\nLet’s create a table with all descriptive statistics for multiple variables:\n\n# Function to calculate all statistics for a variable\ncalc_stats &lt;- function(x, var_name) {\n  mean_val &lt;- round(mean(x, na.rm = TRUE), 2)\n  median_val &lt;- round(median(x, na.rm = TRUE), 2)\n  mode_val &lt;- get_mode(x)\n  sd_val &lt;- round(sd(x, na.rm = TRUE), 2)\n  min_val &lt;- round(min(x, na.rm = TRUE), 2)\n  max_val &lt;- round(max(x, na.rm = TRUE), 2)\n\n  return(data.frame(\n    Variable = var_name,\n    Mean = mean_val,\n    Median = median_val,\n    Mode = mode_val,\n    SD = sd_val,\n    Min = min_val,\n    Max = max_val\n  ))\n}\n\n# Calculate statistics for multiple variables\nstats_mpg &lt;- calc_stats(mtcars$mpg, \"MPG\")\nstats_hp &lt;- calc_stats(mtcars$hp, \"Horsepower\")\nstats_wt &lt;- calc_stats(mtcars$wt, \"Weight\")\nstats_cyl &lt;- calc_stats(mtcars$cyl, \"Cylinders\")\n\n# Combine into one table\ndescriptive_table &lt;- rbind(stats_mpg, stats_hp, stats_wt, stats_cyl)\nprint(descriptive_table)\n\n     Variable   Mean Median   Mode    SD   Min    Max\n1         MPG  20.09  19.20  10.40  6.03 10.40  33.90\n2         MPG  20.09  19.20  15.20  6.03 10.40  33.90\n3         MPG  20.09  19.20  19.20  6.03 10.40  33.90\n4         MPG  20.09  19.20  21.00  6.03 10.40  33.90\n5         MPG  20.09  19.20  21.40  6.03 10.40  33.90\n6         MPG  20.09  19.20  22.80  6.03 10.40  33.90\n7         MPG  20.09  19.20  30.40  6.03 10.40  33.90\n8  Horsepower 146.69 123.00 110.00 68.56 52.00 335.00\n9  Horsepower 146.69 123.00 175.00 68.56 52.00 335.00\n10 Horsepower 146.69 123.00 180.00 68.56 52.00 335.00\n11     Weight   3.22   3.33   3.44  0.98  1.51   5.42\n12  Cylinders   6.19   6.00   8.00  1.79  4.00   8.00\n\n\n\n\n\nR also provides convenient summary functions:\n\n# Summary function gives quartiles and mean\nsummary(mtcars$mpg)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  10.40   15.43   19.20   20.09   22.80   33.90 \n\n# For multiple variables at once\nsummary(mtcars[c(\"mpg\", \"hp\", \"wt\", \"cyl\")])\n\n      mpg              hp              wt             cyl       \n Min.   :10.40   Min.   : 52.0   Min.   :1.513   Min.   :4.000  \n 1st Qu.:15.43   1st Qu.: 96.5   1st Qu.:2.581   1st Qu.:4.000  \n Median :19.20   Median :123.0   Median :3.325   Median :6.000  \n Mean   :20.09   Mean   :146.7   Mean   :3.217   Mean   :6.188  \n 3rd Qu.:22.80   3rd Qu.:180.0   3rd Qu.:3.610   3rd Qu.:8.000  \n Max.   :33.90   Max.   :335.0   Max.   :5.424   Max.   :8.000"
  },
  {
    "objectID": "pset_01.html#identifying-skewness",
    "href": "pset_01.html#identifying-skewness",
    "title": "PSET 1 Practice",
    "section": "",
    "text": "Skewness describes the asymmetry of a distribution. You can identify skewed variables by comparing the mean and median:\n\n# Compare mean and median for different variables\nvariables_to_check &lt;- c(\"mpg\", \"hp\", \"wt\", \"qsec\")\n\nfor (var in variables_to_check) {\n  var_mean &lt;- round(mean(mtcars[[var]]), 2)\n  var_median &lt;- round(median(mtcars[[var]]), 2)\n  difference &lt;- round(var_mean - var_median, 2)\n\n  cat(\"Variable:\", var, \"\\n\")\n  cat(\"Mean:\", var_mean, \"| Median:\", var_median, \"| Difference:\", difference, \"\\n\")\n\n  if (abs(difference) &gt; 0.5) {\n    if (difference &gt; 0) {\n      cat(\"This variable appears RIGHT SKEWED (mean &gt; median)\\n\")\n    } else {\n      cat(\"This variable appears LEFT SKEWED (mean &lt; median)\\n\")\n    }\n  } else {\n    cat(\"This variable appears roughly SYMMETRIC\\n\")\n  }\n  cat(\"\\n\")\n}\n\nVariable: mpg \nMean: 20.09 | Median: 19.2 | Difference: 0.89 \nThis variable appears RIGHT SKEWED (mean &gt; median)\n\nVariable: hp \nMean: 146.69 | Median: 123 | Difference: 23.69 \nThis variable appears RIGHT SKEWED (mean &gt; median)\n\nVariable: wt \nMean: 3.22 | Median: 3.33 | Difference: -0.11 \nThis variable appears roughly SYMMETRIC\n\nVariable: qsec \nMean: 17.85 | Median: 17.71 | Difference: 0.14 \nThis variable appears roughly SYMMETRIC\n\n\nWhen mean &gt; median, the distribution is right-skewed (has a long tail extending to the right). When mean &lt; median, the distribution is left-skewed."
  },
  {
    "objectID": "pset_01.html#creating-histograms",
    "href": "pset_01.html#creating-histograms",
    "title": "PSET 1 Practice",
    "section": "",
    "text": "Histograms show the distribution of continuous variables.\n\n\n\n# Basic histogram\nhist(mtcars$mpg,\n     main = \"Distribution of Miles Per Gallon\",\n     xlab = \"Miles Per Gallon (mpg)\",\n     ylab = \"Frequency\",\n     col = \"hot pink\",\n     border = \"black\")\n\n\n\n\n\n\n\n\n\n\n\n\n# Fancy histogram\nhist(mtcars$mpg,\n     main = \"Distribution of Fuel Efficiency in Motor Trend Cars\",\n     xlab = \"Miles Per Gallon (mpg)\",\n     ylab = \"Number of Cars\",\n     col = \"#CFB87C\", # CU Gold\n     border = \"#565A5C\", # CU Dark Gray\n     breaks = 8,  # Control number of bins\n     las = 1)     # Horizontal y-axis labels\n\n# Add a vertical line for the mean\nabline(v = mean(mtcars$mpg), col = \"black\", lwd = 2, lty = 2)\nlegend(\n  \"topright\",\n  legend = paste(\"Mean =\", round(mean(mtcars$mpg), 1)),\n  lty = 2,\n  lwd = 2\n)\n\n\n\n\n\n\n\n\n\n\n\n\n# Create histogram and analyze shape\nhist(mtcars$hp,\n     main = \"Distribution of Horsepower\",\n     xlab = \"Horsepower (hp)\",\n     ylab = \"Frequency\",\n     col = \"lightcoral\",\n     border = \"darkred\",\n     breaks = 10)\n\n# Add mean and median lines\nabline(v = mean(mtcars$hp), col = \"blue\", lwd = 2, lty = 1)\nabline(v = median(mtcars$hp), col = \"green\", lwd = 2, lty = 2)\nlegend(\"topright\",\n       legend = c(paste(\"Mean =\", round(mean(mtcars$hp), 1)),\n                  paste(\"Median =\", round(median(mtcars$hp), 1))),\n       col = c(\"blue\", \"green\"),\n       lty = c(1, 2),\n       lwd = 2)"
  },
  {
    "objectID": "pset_01.html#creating-boxplots",
    "href": "pset_01.html#creating-boxplots",
    "title": "PSET 1 Practice",
    "section": "",
    "text": "Boxplots show the distribution’s five-number summary and help identify outliers:\n\n\n\n# Basic boxplot\nboxplot(mtcars$mpg,\n        main = \"Distribution of Miles Per Gallon\",\n        ylab = \"Miles Per Gallon (mpg)\",\n        col = \"#CFB87C\",\n        border = \"black\")\n\n\n\n\n\n\n\n\n\n\n\n\n# Identify outliers using the IQR method\nQ1 &lt;- quantile(mtcars$mpg, 0.25)\nQ3 &lt;- quantile(mtcars$mpg, 0.75)\nIQR_mpg &lt;- Q3 - Q1\n\n# Calculate outlier boundaries\nlower_bound &lt;- Q1 - 1.5 * IQR_mpg\nupper_bound &lt;- Q3 + 1.5 * IQR_mpg\n\n# Find outliers\noutliers &lt;- mtcars$mpg[mtcars$mpg &lt; lower_bound | mtcars$mpg &gt; upper_bound]\n\ncat(\"Outlier boundaries: [\", round(lower_bound, 2), \",\", round(upper_bound, 2), \"]\\n\")\n\nOutlier boundaries: [ 4.36 , 33.86 ]\n\ncat(\"Outliers found:\", outliers, \"\\n\")\n\nOutliers found: 33.9 \n\ncat(\"Number of outliers:\", length(outliers), \"\\n\")\n\nNumber of outliers: 1"
  },
  {
    "objectID": "pset_01.html#creating-bar-plots-for-categorical-data",
    "href": "pset_01.html#creating-bar-plots-for-categorical-data",
    "title": "PSET 1 Practice",
    "section": "",
    "text": "For categorical variables, use bar plots instead of histograms:\n\n\n\n# Create a frequency table first\ncyl_freq &lt;- table(mtcars$cyl)\ncyl_freq\n\n\n 4  6  8 \n11  7 14 \n\n# Create bar plot\nbarplot(cyl_freq,\n        main = \"Distribution of Engine Cylinders\",\n        xlab = \"Number of Cylinders\",\n        ylab = \"Number of Cars\",\n        col = c(\"coral\", \"lightgreen\", \"skyblue\"),\n        border = \"black\")\n\n\n\n\n\n\n\n\n\n\n\n\n# Horizontal bar plot\nbarplot(cyl_freq,\n        main = \"Engine Cylinder Distribution\",\n        xlab = \"Number of Cars\",\n        ylab = \"Number of Cylinders\",\n        col = \"orange\",\n        horiz = TRUE,\n        las = 1)"
  },
  {
    "objectID": "pset_01.html#comparing-different-graph-types",
    "href": "pset_01.html#comparing-different-graph-types",
    "title": "PSET 1 Practice",
    "section": "",
    "text": "Let’s create the same data using different visualization methods to understand when to use each:\n\n\n\n# Set up side-by-side plots\npar(mfrow = c(1, 2))\n\n# Histogram\nhist(mtcars$wt,\n     main = \"Weight Distribution - Histogram\",\n     xlab = \"Weight (1000 lbs)\",\n     ylab = \"Frequency\",\n     col = \"lightblue\",\n     border = \"navy\")\n\n# Boxplot\nboxplot(mtcars$wt,\n        main = \"Weight Distribution - Boxplot\",\n        ylab = \"Weight (1000 lbs)\",\n        col = \"lightcoral\",\n        border = \"darkred\")\n\n\n\n\n\n\n\n# Reset to single plot\npar(mfrow = c(1, 1))\n\nWhen to use each: - Histogram: Shows the shape of the distribution, reveals multiple peaks, shows exact frequency counts - Boxplot: Quickly shows median, quartiles, and outliers; great for comparing multiple groups"
  },
  {
    "objectID": "pset_01.html#manual-calculations",
    "href": "pset_01.html#manual-calculations",
    "title": "PSET 1 Practice",
    "section": "",
    "text": "Sometimes you need to calculate statistics by hand to understand the formulas. Let’s practice with a small dataset:\n\n# Small dataset for manual calculation practice\nvalues &lt;- c(3, 9, 8, 14, 6)\nvalues\n\n[1]  3  9  8 14  6\n\n# Calculate mean manually\nmean_manual &lt;- sum(values) / length(values)\ncat(\"Manual mean calculation:\", mean_manual, \"\\n\")\n\nManual mean calculation: 8 \n\ncat(\"R mean function:\", mean(values), \"\\n\")\n\nR mean function: 8 \n\n# Calculate median manually\nsorted_values &lt;- sort(values)\nn &lt;- length(values)\nif (n %% 2 == 1) {\n  median_manual &lt;- sorted_values[(n + 1) / 2]\n} else {\n  median_manual &lt;- (sorted_values[n/2] + sorted_values[n/2 + 1]) / 2\n}\ncat(\"Manual median calculation:\", median_manual, \"\\n\")\n\nManual median calculation: 8 \n\ncat(\"R median function:\", median(values), \"\\n\")\n\nR median function: 8 \n\n# Calculate standard deviation manually\nmean_val &lt;- mean(values)\nsquared_deviations &lt;- (values - mean_val)^2\nvariance_manual &lt;- sum(squared_deviations) / (length(values) - 1)  # Sample variance\nsd_manual &lt;- sqrt(variance_manual)\ncat(\"Manual SD calculation:\", round(sd_manual, 4), \"\\n\")\n\nManual SD calculation: 4.062 \n\ncat(\"R sd function:\", round(sd(values), 4), \"\\n\")\n\nR sd function: 4.062 \n\n\n\n\n\n# Add an outlier and see the effect\nvalues_with_outlier &lt;- c(3, 9, 8, 14, 6, 105)\n\n# Compare statistics\ncat(\"Original data: 3, 9, 8, 14, 6\\n\")\n\nOriginal data: 3, 9, 8, 14, 6\n\ncat(\"Mean:\", round(mean(values), 2), \"| Median:\", median(values), \"| SD:\", round(sd(values), 2), \"\\n\\n\")\n\nMean: 8 | Median: 8 | SD: 4.06 \n\ncat(\"With outlier: 3, 9, 8, 14, 6, 105\\n\")\n\nWith outlier: 3, 9, 8, 14, 6, 105\n\ncat(\"Mean:\", round(mean(values_with_outlier), 2), \"| Median:\", median(values_with_outlier), \"| SD:\", round(sd(values_with_outlier), 2), \"\\n\\n\")\n\nMean: 24.17 | Median: 8.5 | SD: 39.77 \n\ncat(\"The outlier dramatically affects the mean and standard deviation but barely affects the median.\\n\")\n\nThe outlier dramatically affects the mean and standard deviation but barely affects the median."
  },
  {
    "objectID": "pset_01.html#creating-publication-ready-tables",
    "href": "pset_01.html#creating-publication-ready-tables",
    "title": "PSET 1 Practice",
    "section": "",
    "text": "For professional reports, you need well-formatted tables:\n\n# Create a comprehensive statistics table\ncreate_stats_table &lt;- function(data, variables) {\n  results &lt;- data.frame(\n    Variable = character(),\n    Mean = numeric(),\n    Median = numeric(),\n    Mode = numeric(),\n    SD = numeric(),\n    Min = numeric(),\n    Max = numeric(),\n    stringsAsFactors = FALSE\n  )\n\n  for (var in variables) {\n    x &lt;- data[[var]]\n    freq_table &lt;- table(x)\n    mode_val &lt;- as.numeric(names(freq_table)[which.max(freq_table)])\n\n    results &lt;- rbind(results, data.frame(\n      Variable = var,\n      Mean = round(mean(x, na.rm = TRUE), 2),\n      Median = round(median(x, na.rm = TRUE), 2),\n      Mode = mode_val,\n      SD = round(sd(x, na.rm = TRUE), 2),\n      Min = round(min(x, na.rm = TRUE), 2),\n      Max = round(max(x, na.rm = TRUE), 2)\n    ))\n  }\n\n  return(results)\n}\n\n# Create table for key variables\nkey_variables &lt;- c(\"mpg\", \"hp\", \"wt\", \"qsec\", \"cyl\", \"gear\")\nstats_table &lt;- create_stats_table(mtcars, key_variables)\nprint(stats_table)\n\n  Variable   Mean Median   Mode    SD   Min    Max\n1      mpg  20.09  19.20  10.40  6.03 10.40  33.90\n2       hp 146.69 123.00 110.00 68.56 52.00 335.00\n3       wt   3.22   3.33   3.44  0.98  1.51   5.42\n4     qsec  17.85  17.71  17.02  1.79 14.50  22.90\n5      cyl   6.19   6.00   8.00  1.79  4.00   8.00\n6     gear   3.69   4.00   3.00  0.74  3.00   5.00"
  },
  {
    "objectID": "pset_01.html#key-points-to-remember",
    "href": "pset_01.html#key-points-to-remember",
    "title": "PSET 1 Practice",
    "section": "",
    "text": "Use mean() for averages - add na.rm = TRUE if data has missing values\nFilter data using logical indexing: data$variable[data$group == \"value\"]\nCompare mean and median to identify skewed distributions\nUse histograms for continuous data, bar plots for categorical data\nThe standard deviation measures variability - larger values indicate more spread\nOutliers strongly affect mean and SD but have little effect on median\nAlways add titles and axis labels to make graphs interpretable\nRound results appropriately for professional presentation"
  },
  {
    "objectID": "lab_01.html",
    "href": "lab_01.html",
    "title": "Lab 1",
    "section": "",
    "text": "Welcome to R! This lab will introduce you to the basics of programming in R. Don’t worry if you’ve never programmed before. We’ll start from the very beginning and build up your skills step by step.\nR is a powerful statistical programming language that’s widely used by data analysts, researchers, and statisticians around the world. What makes R special is that it’s designed specifically for working with data, making complex analyses surprisingly straightforward.\nFor this lab, we’ll use the iris dataset, which contains measurements of iris flowers. This dataset is good for beginners because it’s small (150 observations), easy to understand, and appears in countless R tutorials and statistics textbooks.\nLet’s look at our dataset:\n\n# Load the iris dataset\ndata(iris)\n\n# Display the first few rows\nhead(iris)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\n\nThe iris dataset contains measurements of 150 iris flowers from three different species. Each flower has four measurements: sepal length, sepal width, petal length, and petal width (all in centimeters).\n\n\n\n\n\nR can perform mathematical calculations just like a calculator. Let’s start with some basic arithmetic:\n\n# Basic arithmetic operations\n5 + 3        # Addition\n\n[1] 8\n\n10 - 4       # Subtraction\n\n[1] 6\n\n6 * 7        # Multiplication\n\n[1] 42\n\n20 / 4       # Division\n\n[1] 5\n\n2^3          # Exponentiation (2 to the power of 3)\n\n[1] 8\n\nsqrt(16)     # Square root\n\n[1] 4\n\n\nNotice that R shows you the result immediately. The [1] at the beginning of each result line is R’s way of numbering the output (useful when results have multiple values).\n\n\n\nR follows the standard mathematical order of operations (PEMDAS):\n\n# R follows order of operations\n5 + 2 * 3       # Multiplication first: 5 + 6 = 11\n\n[1] 11\n\n(5 + 2) * 3     # Parentheses first: 7 * 3 = 21\n\n[1] 21\n\n10 / 2 + 3      # Division first: 5 + 3 = 8\n\n[1] 8\n\n10 / (2 + 3)    # Parentheses first: 10 / 5 = 2\n\n[1] 2\n\n\nAlways use parentheses when you’re unsure about the order of operations!\n\n\n\n\n\n\nIn programming, a variable is like a labeled container that stores information. In R, we create variables using the assignment operator &lt;-:\n\n# Create variables\nmy_number &lt;- 42\nmy_name &lt;- \"Hamlet\"\nflower_count &lt;- 150\n\n# Display variable contents\nmy_number\n\n[1] 42\n\nmy_name\n\n[1] \"Hamlet\"\n\nflower_count\n\n[1] 150\n\n\nVariable names should be descriptive and follow these rules: - Start with a letter - Can contain letters, numbers, underscores, and periods - Cannot contain spaces - Are case-sensitive (MyVar and myvar are different)\n\n\n\nOnce you create variables, you can use them in calculations and operations:\n\n# Use variables in calculations\nprice_per_item &lt;- 2.50\nquantity &lt;- 8\ntotal_cost &lt;- price_per_item * quantity\ntotal_cost\n\n[1] 20\n\n# You can update variables\nquantity &lt;- quantity + 2  # Add 2 more items\nquantity\n\n[1] 10\n\n# Create new variables from existing ones\ntax_rate &lt;- 0.08\ntotal_with_tax &lt;- total_cost * (1 + tax_rate)\ntotal_with_tax\n\n[1] 21.6\n\n\n\n\n\n\nR works with different types of data. Understanding data types is important because they determine what operations you can perform.\n\n\nNumbers can be integers (whole numbers) or doubles (decimal numbers). By default, R stores whole numbers as decimal numbers for precision in mathematical operations. You can force R to use an integer by appending “L” to a number, but you’ll rarely need to do this.\n\n# Numeric data examples\nage &lt;- 30L             # Integer (explicitly)\nheight &lt;- 5.8          # Double (decimal)\ntemperature &lt;- -3.2    # Can be negative\n\n# Check what type of data you have\ntypeof(age)\n\n[1] \"integer\"\n\ntypeof(height)\n\n[1] \"double\"\n\n\n\n\n\nText data is called “character” data in R and must be enclosed in quotes:\n\n# Character data examples\nfirst_name &lt;- \"Juliet\"\nlast_name &lt;- \"Capulet\"\nfull_name &lt;- paste(first_name, last_name)  # Combine text\nfull_name\n\n[1] \"Juliet Capulet\"\n\n# Check the data type\ntypeof(first_name)\n\n[1] \"character\"\n\n\n\n\n\nLogical data represents yes/no, true/false conditions:\n\n# Logical data examples\nis_student &lt;- TRUE\nis_working &lt;- FALSE\nhas_license &lt;- TRUE\n\n# Logical operations\nis_adult &lt;- age &gt;= 18\nis_adult\n\n[1] TRUE\n\ntypeof(is_student)\n\n[1] \"logical\"\n\n\n\n\n\n\nNow let’s use our programming skills to explore the iris dataset:\n\n\n\n# Get basic information about the dataset\nnrow(iris)      # Number of rows\n\n[1] 150\n\nncol(iris)      # Number of columns\n\n[1] 5\n\ndim(iris)       # Dimensions (rows, columns)\n\n[1] 150   5\n\nnames(iris)     # Column names\n\n[1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\"  \"Species\"     \n\nstr(iris)       # Structure of the data\n\n'data.frame':   150 obs. of  5 variables:\n $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...\n\n\nThe str() function is particularly useful—it shows you the structure of your data, including variable types and the first few values.\n\n\n\nYou can access specific columns (variables) in your dataset using the $ operator:\n\n# Access individual columns\nsepal_lengths &lt;- iris$Sepal.Length\npetal_lengths &lt;- iris$Petal.Length\n\n# Look at the first 10 values\nsepal_lengths[1:10]\n\n [1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9\n\npetal_lengths[1:10]\n\n [1] 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5\n\n\nThe square brackets [1:10] tell R to show positions 1 through 10. This is called indexing.\n\n\n\nR makes it easy to calculate basic statistics:\n\n# Calculate basic statistics for sepal length\nmean(iris$Sepal.Length)      # Average\n\n[1] 5.843333\n\nmedian(iris$Sepal.Length)    # Middle value\n\n[1] 5.8\n\nmin(iris$Sepal.Length)       # Minimum value\n\n[1] 4.3\n\nmax(iris$Sepal.Length)       # Maximum value\n\n[1] 7.9\n\nrange(iris$Sepal.Length)     # Minimum and maximum\n\n[1] 4.3 7.9\n\nsd(iris$Sepal.Length)        # Standard deviation\n\n[1] 0.8280661\n\n\n\n\n\nThe summary() function gives you a quick overview of each variable:\n\n# Get summary statistics for the entire dataset\nsummary(iris)\n\n  Sepal.Length    Sepal.Width     Petal.Length    Petal.Width   \n Min.   :4.300   Min.   :2.000   Min.   :1.000   Min.   :0.100  \n 1st Qu.:5.100   1st Qu.:2.800   1st Qu.:1.600   1st Qu.:0.300  \n Median :5.800   Median :3.000   Median :4.350   Median :1.300  \n Mean   :5.843   Mean   :3.057   Mean   :3.758   Mean   :1.199  \n 3rd Qu.:6.400   3rd Qu.:3.300   3rd Qu.:5.100   3rd Qu.:1.800  \n Max.   :7.900   Max.   :4.400   Max.   :6.900   Max.   :2.500  \n       Species  \n setosa    :50  \n versicolor:50  \n virginica :50  \n                \n                \n                \n\n\nThis shows you the minimum, first quartile, median, mean, third quartile, and maximum for numeric variables. For categorical variables (like Species), it shows counts.\n\n\n\n\nA vector is a collection of values of the same type. Much of R’s power comes from working with vectors:\n\n\n\n# Create vectors using c() function\nages &lt;- c(30, 50, 22, 35, 28, 45)\nnames &lt;- c(\"Hamlet\", \"Lear\", \"Romeo\", \"Othello\", \"Juliet\", \"Macbeth\")\nheights &lt;- c(5.8, 5.4, 6.1, 5.9, 5.2, 5.7)\n\n# Display vectors\nages\n\n[1] 30 50 22 35 28 45\n\nnames\n\n[1] \"Hamlet\"  \"Lear\"    \"Romeo\"   \"Othello\" \"Juliet\"  \"Macbeth\"\n\nheights\n\n[1] 5.8 5.4 6.1 5.9 5.2 5.7\n\n\n\n\n\nYou can perform operations on entire vectors at once:\n\n# Mathematical operations on vectors\nages_in_months &lt;- ages * 12\nages_in_months\n\n[1] 360 600 264 420 336 540\n\n# Convert heights from feet to inches\nheights_inches &lt;- heights * 12\nheights_inches\n\n[1] 69.6 64.8 73.2 70.8 62.4 68.4\n\n# Logical operations\nis_adult &lt;- ages &gt;= 18\nis_adult\n\n[1] TRUE TRUE TRUE TRUE TRUE TRUE\n\n# How many adults?\nsum(is_adult)  # TRUE counts as 1, FALSE as 0\n\n[1] 6\n\n\n\n\n\nYou can access specific elements of a vector:\n\n# Access specific elements\nfirst_age &lt;- ages[1]        # First element\nlast_age &lt;- ages[6]         # Sixth element\nfirst_three &lt;- ages[1:3]    # First three elements\nselected &lt;- ages[c(1, 3, 5)] # Elements 1, 3, and 5\n\nfirst_age\n\n[1] 30\n\nfirst_three\n\n[1] 30 50 22\n\nselected\n\n[1] 30 22 28\n\n\n\n\n\n\nLet’s put everything together to analyze the iris dataset:\n\n\n\n# Look at the species in our dataset\nunique(iris$Species)        # What species do we have?\n\n[1] setosa     versicolor virginica \nLevels: setosa versicolor virginica\n\ntable(iris$Species)         # How many of each species?\n\n\n    setosa versicolor  virginica \n        50         50         50 \n\n# Calculate average petal length for each species\nsetosa_petals &lt;- iris$Petal.Length[iris$Species == \"setosa\"]\nversicolor_petals &lt;- iris$Petal.Length[iris$Species == \"versicolor\"]\nvirginica_petals &lt;- iris$Petal.Length[iris$Species == \"virginica\"]\n\nmean(setosa_petals)\n\n[1] 1.462\n\nmean(versicolor_petals)\n\n[1] 4.26\n\nmean(virginica_petals)\n\n[1] 5.552\n\n\n\n\n\n\n# Find the largest and smallest flowers\nlargest_sepal &lt;- max(iris$Sepal.Length)\nsmallest_sepal &lt;- min(iris$Sepal.Length)\n\ncat(\"Largest sepal length:\", largest_sepal, \"cm\\n\")\n\nLargest sepal length: 7.9 cm\n\ncat(\"Smallest sepal length:\", smallest_sepal, \"cm\\n\")\n\nSmallest sepal length: 4.3 cm\n\n# Which flowers have the largest and smallest sepals?\nwhich(iris$Sepal.Length == largest_sepal)\n\n[1] 132\n\nwhich(iris$Sepal.Length == smallest_sepal)\n\n[1] 14\n\n# What species are they?\niris$Species[iris$Sepal.Length == largest_sepal]\n\n[1] virginica\nLevels: setosa versicolor virginica\n\niris$Species[iris$Sepal.Length == smallest_sepal]\n\n[1] setosa\nLevels: setosa versicolor virginica\n\n\n\n\n\nYou can create new variables based on existing ones:\n\n# Create a new variable: sepal area (length × width)\niris$Sepal.Area &lt;- iris$Sepal.Length * iris$Sepal.Width\n\n# Create a new variable: petal area\niris$Petal.Area &lt;- iris$Petal.Length * iris$Petal.Width\n\n# Look at our new variables\nhead(iris$Sepal.Area)\n\n[1] 17.85 14.70 15.04 14.26 18.00 21.06\n\nsummary(iris$Sepal.Area)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  10.00   15.66   17.66   17.82   20.32   30.02 \n\n\n\n\n\n\nFunctions are pre-written pieces of code that perform specific tasks. We’ve already used many functions like mean(), max(), and summary().\n\n\nEvery function has a name followed by parentheses. Inside the parentheses, you put the inputs (called arguments):\n\n# Function structure: function_name(arguments)\nmean(iris$Sepal.Length)           # One argument\n\n[1] 5.843333\n\nround(3.14159, digits = 2)        # Two arguments\n\n[1] 3.14\n\npaste(\"Hello\", \"World\", sep = \" \") # Multiple arguments\n\n[1] \"Hello World\"\n\n\n\n\n\nWhen you need help with a function, use the ? operator:\n\n# Get help for functions (uncomment to run)\n# ?mean\n# ?summary\n# ?paste\n\nThis opens the help documentation, which explains what the function does and what arguments it accepts.\n\n\n\n\n\n\nComments are notes you write in your code to explain what you’re doing. They start with # and are ignored by R:\n\n# This is a comment - R ignores this line\nx &lt;- 5  # You can also put comments at the end of lines\n\n# Calculate the average sepal length\naverage_sepal &lt;- mean(iris$Sepal.Length)\n\n# Display the result\naverage_sepal\n\n[1] 5.843333\n\n\nGood comments explain why you’re doing something, not just what you’re doing.\n\n\n\nKeep your code organized and readable:\n\n# Good: Clear variable names and spacing\nflower_count &lt;- nrow(iris)\naverage_petal_length &lt;- mean(iris$Petal.Length)\n\n# Less good: Unclear names and cramped\nn&lt;-nrow(iris)\nx&lt;-mean(iris$Petal.Length)\n\nflower_count\n\n[1] 150\n\naverage_petal_length\n\n[1] 3.758\n\n\n\n\n\n\nExercise 1: Create three variables: your age, your height (in feet), and your favorite color. Display each variable.\nExercise 2: Convert your height from feet to inches and store it in a new variable called height_inches.\nExercise 3: Using the iris dataset, find the average sepal width for each species.\nExercise 4: Create a new variable in the iris dataset called Petal.Ratio that equals petal length divided by petal width.\nExercise 5: How many flowers in the iris dataset have sepal length greater than 6.0 cm?\n\n\n\nAs you continue learning R, keep these essential points in mind:\n\nR is case-sensitive - Data and data are different\nUse the assignment operator &lt;- to create variables (not =)\nUse descriptive variable names - student_age is better than x\nComments are your friend - use # to explain your code\nFunctions need parentheses - even if they take no arguments\nVectors are fundamental - R is designed to work with collections of data\nThe $ operator accesses columns in datasets\nSquare brackets [] access specific elements or positions\nPractice regularly - programming is a skill that improves with practice\nDon’t be afraid to experiment - R is forgiving and you can’t break anything\nUse ?function_name to get help when you’re stuck\n\nR has a learning curve, but it’s incredibly rewarding once you get the hang of it. Every expert started as a beginner, so be patient with yourself and keep practicing!"
  },
  {
    "objectID": "lab_01.html#introduction",
    "href": "lab_01.html#introduction",
    "title": "Lab 1",
    "section": "",
    "text": "Welcome to R! This lab will introduce you to the basics of programming in R. Don’t worry if you’ve never programmed before. We’ll start from the very beginning and build up your skills step by step.\nR is a powerful statistical programming language that’s widely used by data analysts, researchers, and statisticians around the world. What makes R special is that it’s designed specifically for working with data, making complex analyses surprisingly straightforward.\nFor this lab, we’ll use the iris dataset, which contains measurements of iris flowers. This dataset is good for beginners because it’s small (150 observations), easy to understand, and appears in countless R tutorials and statistics textbooks.\nLet’s look at our dataset:\n\n# Load the iris dataset\ndata(iris)\n\n# Display the first few rows\nhead(iris)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\n\nThe iris dataset contains measurements of 150 iris flowers from three different species. Each flower has four measurements: sepal length, sepal width, petal length, and petal width (all in centimeters)."
  },
  {
    "objectID": "lab_01.html#basic-r-operations",
    "href": "lab_01.html#basic-r-operations",
    "title": "Lab 1",
    "section": "",
    "text": "R can perform mathematical calculations just like a calculator. Let’s start with some basic arithmetic:\n\n# Basic arithmetic operations\n5 + 3        # Addition\n\n[1] 8\n\n10 - 4       # Subtraction\n\n[1] 6\n\n6 * 7        # Multiplication\n\n[1] 42\n\n20 / 4       # Division\n\n[1] 5\n\n2^3          # Exponentiation (2 to the power of 3)\n\n[1] 8\n\nsqrt(16)     # Square root\n\n[1] 4\n\n\nNotice that R shows you the result immediately. The [1] at the beginning of each result line is R’s way of numbering the output (useful when results have multiple values).\n\n\n\nR follows the standard mathematical order of operations (PEMDAS):\n\n# R follows order of operations\n5 + 2 * 3       # Multiplication first: 5 + 6 = 11\n\n[1] 11\n\n(5 + 2) * 3     # Parentheses first: 7 * 3 = 21\n\n[1] 21\n\n10 / 2 + 3      # Division first: 5 + 3 = 8\n\n[1] 8\n\n10 / (2 + 3)    # Parentheses first: 10 / 5 = 2\n\n[1] 2\n\n\nAlways use parentheses when you’re unsure about the order of operations!"
  },
  {
    "objectID": "lab_01.html#working-with-objects",
    "href": "lab_01.html#working-with-objects",
    "title": "Lab 1",
    "section": "",
    "text": "In programming, a variable is like a labeled container that stores information. In R, we create variables using the assignment operator &lt;-:\n\n# Create variables\nmy_number &lt;- 42\nmy_name &lt;- \"Hamlet\"\nflower_count &lt;- 150\n\n# Display variable contents\nmy_number\n\n[1] 42\n\nmy_name\n\n[1] \"Hamlet\"\n\nflower_count\n\n[1] 150\n\n\nVariable names should be descriptive and follow these rules: - Start with a letter - Can contain letters, numbers, underscores, and periods - Cannot contain spaces - Are case-sensitive (MyVar and myvar are different)\n\n\n\nOnce you create variables, you can use them in calculations and operations:\n\n# Use variables in calculations\nprice_per_item &lt;- 2.50\nquantity &lt;- 8\ntotal_cost &lt;- price_per_item * quantity\ntotal_cost\n\n[1] 20\n\n# You can update variables\nquantity &lt;- quantity + 2  # Add 2 more items\nquantity\n\n[1] 10\n\n# Create new variables from existing ones\ntax_rate &lt;- 0.08\ntotal_with_tax &lt;- total_cost * (1 + tax_rate)\ntotal_with_tax\n\n[1] 21.6"
  },
  {
    "objectID": "lab_01.html#data-types",
    "href": "lab_01.html#data-types",
    "title": "Lab 1",
    "section": "",
    "text": "R works with different types of data. Understanding data types is important because they determine what operations you can perform.\n\n\nNumbers can be integers (whole numbers) or doubles (decimal numbers). By default, R stores whole numbers as decimal numbers for precision in mathematical operations. You can force R to use an integer by appending “L” to a number, but you’ll rarely need to do this.\n\n# Numeric data examples\nage &lt;- 30L             # Integer (explicitly)\nheight &lt;- 5.8          # Double (decimal)\ntemperature &lt;- -3.2    # Can be negative\n\n# Check what type of data you have\ntypeof(age)\n\n[1] \"integer\"\n\ntypeof(height)\n\n[1] \"double\"\n\n\n\n\n\nText data is called “character” data in R and must be enclosed in quotes:\n\n# Character data examples\nfirst_name &lt;- \"Juliet\"\nlast_name &lt;- \"Capulet\"\nfull_name &lt;- paste(first_name, last_name)  # Combine text\nfull_name\n\n[1] \"Juliet Capulet\"\n\n# Check the data type\ntypeof(first_name)\n\n[1] \"character\"\n\n\n\n\n\nLogical data represents yes/no, true/false conditions:\n\n# Logical data examples\nis_student &lt;- TRUE\nis_working &lt;- FALSE\nhas_license &lt;- TRUE\n\n# Logical operations\nis_adult &lt;- age &gt;= 18\nis_adult\n\n[1] TRUE\n\ntypeof(is_student)\n\n[1] \"logical\""
  },
  {
    "objectID": "lab_01.html#exploring-the-iris-dataset",
    "href": "lab_01.html#exploring-the-iris-dataset",
    "title": "Lab 1",
    "section": "",
    "text": "Now let’s use our programming skills to explore the iris dataset:\n\n\n\n# Get basic information about the dataset\nnrow(iris)      # Number of rows\n\n[1] 150\n\nncol(iris)      # Number of columns\n\n[1] 5\n\ndim(iris)       # Dimensions (rows, columns)\n\n[1] 150   5\n\nnames(iris)     # Column names\n\n[1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\"  \"Species\"     \n\nstr(iris)       # Structure of the data\n\n'data.frame':   150 obs. of  5 variables:\n $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...\n\n\nThe str() function is particularly useful—it shows you the structure of your data, including variable types and the first few values.\n\n\n\nYou can access specific columns (variables) in your dataset using the $ operator:\n\n# Access individual columns\nsepal_lengths &lt;- iris$Sepal.Length\npetal_lengths &lt;- iris$Petal.Length\n\n# Look at the first 10 values\nsepal_lengths[1:10]\n\n [1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9\n\npetal_lengths[1:10]\n\n [1] 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5\n\n\nThe square brackets [1:10] tell R to show positions 1 through 10. This is called indexing.\n\n\n\nR makes it easy to calculate basic statistics:\n\n# Calculate basic statistics for sepal length\nmean(iris$Sepal.Length)      # Average\n\n[1] 5.843333\n\nmedian(iris$Sepal.Length)    # Middle value\n\n[1] 5.8\n\nmin(iris$Sepal.Length)       # Minimum value\n\n[1] 4.3\n\nmax(iris$Sepal.Length)       # Maximum value\n\n[1] 7.9\n\nrange(iris$Sepal.Length)     # Minimum and maximum\n\n[1] 4.3 7.9\n\nsd(iris$Sepal.Length)        # Standard deviation\n\n[1] 0.8280661\n\n\n\n\n\nThe summary() function gives you a quick overview of each variable:\n\n# Get summary statistics for the entire dataset\nsummary(iris)\n\n  Sepal.Length    Sepal.Width     Petal.Length    Petal.Width   \n Min.   :4.300   Min.   :2.000   Min.   :1.000   Min.   :0.100  \n 1st Qu.:5.100   1st Qu.:2.800   1st Qu.:1.600   1st Qu.:0.300  \n Median :5.800   Median :3.000   Median :4.350   Median :1.300  \n Mean   :5.843   Mean   :3.057   Mean   :3.758   Mean   :1.199  \n 3rd Qu.:6.400   3rd Qu.:3.300   3rd Qu.:5.100   3rd Qu.:1.800  \n Max.   :7.900   Max.   :4.400   Max.   :6.900   Max.   :2.500  \n       Species  \n setosa    :50  \n versicolor:50  \n virginica :50  \n                \n                \n                \n\n\nThis shows you the minimum, first quartile, median, mean, third quartile, and maximum for numeric variables. For categorical variables (like Species), it shows counts."
  },
  {
    "objectID": "lab_01.html#working-with-vectors",
    "href": "lab_01.html#working-with-vectors",
    "title": "Lab 1",
    "section": "",
    "text": "A vector is a collection of values of the same type. Much of R’s power comes from working with vectors:\n\n\n\n# Create vectors using c() function\nages &lt;- c(30, 50, 22, 35, 28, 45)\nnames &lt;- c(\"Hamlet\", \"Lear\", \"Romeo\", \"Othello\", \"Juliet\", \"Macbeth\")\nheights &lt;- c(5.8, 5.4, 6.1, 5.9, 5.2, 5.7)\n\n# Display vectors\nages\n\n[1] 30 50 22 35 28 45\n\nnames\n\n[1] \"Hamlet\"  \"Lear\"    \"Romeo\"   \"Othello\" \"Juliet\"  \"Macbeth\"\n\nheights\n\n[1] 5.8 5.4 6.1 5.9 5.2 5.7\n\n\n\n\n\nYou can perform operations on entire vectors at once:\n\n# Mathematical operations on vectors\nages_in_months &lt;- ages * 12\nages_in_months\n\n[1] 360 600 264 420 336 540\n\n# Convert heights from feet to inches\nheights_inches &lt;- heights * 12\nheights_inches\n\n[1] 69.6 64.8 73.2 70.8 62.4 68.4\n\n# Logical operations\nis_adult &lt;- ages &gt;= 18\nis_adult\n\n[1] TRUE TRUE TRUE TRUE TRUE TRUE\n\n# How many adults?\nsum(is_adult)  # TRUE counts as 1, FALSE as 0\n\n[1] 6\n\n\n\n\n\nYou can access specific elements of a vector:\n\n# Access specific elements\nfirst_age &lt;- ages[1]        # First element\nlast_age &lt;- ages[6]         # Sixth element\nfirst_three &lt;- ages[1:3]    # First three elements\nselected &lt;- ages[c(1, 3, 5)] # Elements 1, 3, and 5\n\nfirst_age\n\n[1] 30\n\nfirst_three\n\n[1] 30 50 22\n\nselected\n\n[1] 30 22 28"
  },
  {
    "objectID": "lab_01.html#simple-data-analysis",
    "href": "lab_01.html#simple-data-analysis",
    "title": "Lab 1",
    "section": "",
    "text": "Let’s put everything together to analyze the iris dataset:\n\n\n\n# Look at the species in our dataset\nunique(iris$Species)        # What species do we have?\n\n[1] setosa     versicolor virginica \nLevels: setosa versicolor virginica\n\ntable(iris$Species)         # How many of each species?\n\n\n    setosa versicolor  virginica \n        50         50         50 \n\n# Calculate average petal length for each species\nsetosa_petals &lt;- iris$Petal.Length[iris$Species == \"setosa\"]\nversicolor_petals &lt;- iris$Petal.Length[iris$Species == \"versicolor\"]\nvirginica_petals &lt;- iris$Petal.Length[iris$Species == \"virginica\"]\n\nmean(setosa_petals)\n\n[1] 1.462\n\nmean(versicolor_petals)\n\n[1] 4.26\n\nmean(virginica_petals)\n\n[1] 5.552\n\n\n\n\n\n\n# Find the largest and smallest flowers\nlargest_sepal &lt;- max(iris$Sepal.Length)\nsmallest_sepal &lt;- min(iris$Sepal.Length)\n\ncat(\"Largest sepal length:\", largest_sepal, \"cm\\n\")\n\nLargest sepal length: 7.9 cm\n\ncat(\"Smallest sepal length:\", smallest_sepal, \"cm\\n\")\n\nSmallest sepal length: 4.3 cm\n\n# Which flowers have the largest and smallest sepals?\nwhich(iris$Sepal.Length == largest_sepal)\n\n[1] 132\n\nwhich(iris$Sepal.Length == smallest_sepal)\n\n[1] 14\n\n# What species are they?\niris$Species[iris$Sepal.Length == largest_sepal]\n\n[1] virginica\nLevels: setosa versicolor virginica\n\niris$Species[iris$Sepal.Length == smallest_sepal]\n\n[1] setosa\nLevels: setosa versicolor virginica\n\n\n\n\n\nYou can create new variables based on existing ones:\n\n# Create a new variable: sepal area (length × width)\niris$Sepal.Area &lt;- iris$Sepal.Length * iris$Sepal.Width\n\n# Create a new variable: petal area\niris$Petal.Area &lt;- iris$Petal.Length * iris$Petal.Width\n\n# Look at our new variables\nhead(iris$Sepal.Area)\n\n[1] 17.85 14.70 15.04 14.26 18.00 21.06\n\nsummary(iris$Sepal.Area)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  10.00   15.66   17.66   17.82   20.32   30.02"
  },
  {
    "objectID": "lab_01.html#functions-in-r",
    "href": "lab_01.html#functions-in-r",
    "title": "Lab 1",
    "section": "",
    "text": "Functions are pre-written pieces of code that perform specific tasks. We’ve already used many functions like mean(), max(), and summary().\n\n\nEvery function has a name followed by parentheses. Inside the parentheses, you put the inputs (called arguments):\n\n# Function structure: function_name(arguments)\nmean(iris$Sepal.Length)           # One argument\n\n[1] 5.843333\n\nround(3.14159, digits = 2)        # Two arguments\n\n[1] 3.14\n\npaste(\"Hello\", \"World\", sep = \" \") # Multiple arguments\n\n[1] \"Hello World\"\n\n\n\n\n\nWhen you need help with a function, use the ? operator:\n\n# Get help for functions (uncomment to run)\n# ?mean\n# ?summary\n# ?paste\n\nThis opens the help documentation, which explains what the function does and what arguments it accepts."
  },
  {
    "objectID": "lab_01.html#comments-and-good-practices",
    "href": "lab_01.html#comments-and-good-practices",
    "title": "Lab 1",
    "section": "",
    "text": "Comments are notes you write in your code to explain what you’re doing. They start with # and are ignored by R:\n\n# This is a comment - R ignores this line\nx &lt;- 5  # You can also put comments at the end of lines\n\n# Calculate the average sepal length\naverage_sepal &lt;- mean(iris$Sepal.Length)\n\n# Display the result\naverage_sepal\n\n[1] 5.843333\n\n\nGood comments explain why you’re doing something, not just what you’re doing.\n\n\n\nKeep your code organized and readable:\n\n# Good: Clear variable names and spacing\nflower_count &lt;- nrow(iris)\naverage_petal_length &lt;- mean(iris$Petal.Length)\n\n# Less good: Unclear names and cramped\nn&lt;-nrow(iris)\nx&lt;-mean(iris$Petal.Length)\n\nflower_count\n\n[1] 150\n\naverage_petal_length\n\n[1] 3.758"
  },
  {
    "objectID": "lab_01.html#exercise-problems",
    "href": "lab_01.html#exercise-problems",
    "title": "Lab 1",
    "section": "",
    "text": "Exercise 1: Create three variables: your age, your height (in feet), and your favorite color. Display each variable.\nExercise 2: Convert your height from feet to inches and store it in a new variable called height_inches.\nExercise 3: Using the iris dataset, find the average sepal width for each species.\nExercise 4: Create a new variable in the iris dataset called Petal.Ratio that equals petal length divided by petal width.\nExercise 5: How many flowers in the iris dataset have sepal length greater than 6.0 cm?"
  },
  {
    "objectID": "lab_01.html#key-points-to-remember",
    "href": "lab_01.html#key-points-to-remember",
    "title": "Lab 1",
    "section": "",
    "text": "As you continue learning R, keep these essential points in mind:\n\nR is case-sensitive - Data and data are different\nUse the assignment operator &lt;- to create variables (not =)\nUse descriptive variable names - student_age is better than x\nComments are your friend - use # to explain your code\nFunctions need parentheses - even if they take no arguments\nVectors are fundamental - R is designed to work with collections of data\nThe $ operator accesses columns in datasets\nSquare brackets [] access specific elements or positions\nPractice regularly - programming is a skill that improves with practice\nDon’t be afraid to experiment - R is forgiving and you can’t break anything\nUse ?function_name to get help when you’re stuck\n\nR has a learning curve, but it’s incredibly rewarding once you get the hang of it. Every expert started as a beginner, so be patient with yourself and keep practicing!"
  },
  {
    "objectID": "lab_02.html",
    "href": "lab_02.html",
    "title": "Lab 2",
    "section": "",
    "text": "Understanding the distribution of data is fundamental to statistical analysis. For this lab, we’ll create frequency tables, calculate cumulative frequencies, and visualize distributions using bar plots and histograms using basic R functions.\n\n\nR comes with many built-in datasets that are great for learning and practicing data analysis techniques. These datasets are immediately available without needing to load external files. Try the running the code below on your computer.\n\n# See all available built-in datasets\nlibrary(datasets)\ndata()\n\nWe’ll use the mtcars dataset, which contains information about 32 automobiles from a 1974 Motor Trend magazine. This dataset is popular in R tutorials and instructional materials because it’s relatively small, easy to understand, and contains both categorical and continuous variables.\nLet’s begin by examining our dataset:\n\n# Load and examine the mtcars dataset\ndata(mtcars)\nhead(mtcars)\n\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n\nstr(mtcars)\n\n'data.frame':   32 obs. of  11 variables:\n $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...\n $ disp: num  160 160 108 258 360 ...\n $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...\n $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n $ qsec: num  16.5 17 18.6 19.4 17 ...\n $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...\n $ am  : num  1 1 1 0 0 0 0 0 0 0 ...\n $ gear: num  4 4 4 3 3 3 3 4 4 4 ...\n $ carb: num  4 4 1 1 2 1 4 2 2 4 ...\n\n\nThe mtcars dataset contains 32 observations (cars) and 11 variables including miles per gallon (mpg), number of cylinders (cyl), horsepower (hp), and transmission type (am, where 0=automatic and 1=manual).\n\n\n\n\n\n\nA frequency table shows how often each unique value appears in your data. This is especially useful for categorical variables (like the number of cylinders in a car engine) or discrete numeric variables. The table() function is your primary tool for creating frequency tables in R.\nLet’s create a frequency table for the number of cylinders in our cars:\n\n# Create a frequency table for number of cylinders\ncyl_freq &lt;- table(mtcars$cyl)\ncyl_freq\n\n\n 4  6  8 \n11  7 14 \n\n\nThis output tells us that 11 cars have 4 cylinders, 7 cars have 6 cylinders, and 14 cars have 8 cylinders. The table() function automatically counts each unique value and presents the results.\n\n\n\nWhile raw frequencies tell us how many observations fall into each category, proportions (also called relative frequencies) tell us what proportion of the total each category represents.\nTo convert frequencies to proportions, use the prop.table() function:\n\n# Calculate proportions\ncyl_prop &lt;- prop.table(cyl_freq)\ncyl_prop\n\n\n      4       6       8 \n0.34375 0.21875 0.43750 \n\n# Convert to percentages (multiply by 100)\ncyl_percent &lt;- prop.table(cyl_freq) * 100\ncyl_percent\n\n\n     4      6      8 \n34.375 21.875 43.750 \n\n\nNow we can see that approximately 34% of cars have 4 cylinders, 22% have 6 cylinders, and 44% have 8 cylinders. Percentages are sometimes easier to interpret and communicate to others than raw proportions.\n\n\n\nCumulative frequencies show the running total of frequencies up to and including each category. They answer questions like “How many cars have 6 cylinders or fewer?” This is useful when your categories have a natural ordering (like our cylinder counts: 4, 6, 8).\nUse the cumsum() function to calculate cumulative frequencies:\n\n# Calculate cumulative frequencies\ncyl_cumfreq &lt;- cumsum(cyl_freq)\ncyl_cumfreq\n\n 4  6  8 \n11 18 32 \n\n# Create a comprehensive frequency table combining all our calculations\nfreq_table &lt;- data.frame(\n  Cylinders = names(cyl_freq),\n  Frequency = as.numeric(cyl_freq),\n  Proportion = as.numeric(cyl_prop),\n  Percentage = as.numeric(cyl_percent),\n  Cumulative_Freq = as.numeric(cyl_cumfreq),\n  Cumulative_Prop = cumsum(as.numeric(cyl_prop))\n)\nfreq_table\n\n  Cylinders Frequency Proportion Percentage Cumulative_Freq Cumulative_Prop\n1         4        11    0.34375     34.375              11         0.34375\n2         6         7    0.21875     21.875              18         0.56250\n3         8        14    0.43750     43.750              32         1.00000\n\n\nLooking at our cumulative frequencies, we can see that 18 cars (11 + 7) have 6 cylinders or fewer, and all 32 cars have 8 cylinders or fewer (which makes sense since 8 is the maximum in our dataset).\n\n\n\n\n\n\nBar plots (also called bar charts) are a common way to visualize categorical data. Each bar’s height represents the frequency (count) of that category. The barplot() function in base R creates bar charts from frequency tables or vectors.\nLet’s create a basic bar plot of our cylinder frequencies:\n\n# Basic bar plot of cylinder frequencies\nbarplot(\n  cyl_freq,\n  main = \"Frequency of Cylinder Counts\",\n  xlab = \"Number of Cylinders\",\n  ylab = \"Frequency\",\n  col = \"lightblue\",\n  border = \"black\"\n)\n\n\n\n\n\n\n\n\nThe main argument adds a title, xlab and ylab add axis labels, col sets the bar color, and border sets the color of the bar outlines. Good labels make your plots much easier to understand.\n\n\n\nSometimes horizontal bar plots are easier to read, especially when category names are long. You can create these by adding the horiz = TRUE argument:\n\n# Horizontal bar plot\nbarplot(\n  cyl_freq,\n  main = \"Cylinder Distribution\",\n  xlab = \"Frequency\",        # Note: x and y labels are swapped\n  ylab = \"Number of Cylinders\",\n  col = \"orange\",\n  horiz = TRUE,             # Make bars horizontal\n  las = 1                   # las=1 makes y-axis labels horizontal\n)                  \n\n\n\n\n\n\n\n\nNotice how we swapped the x and y axis labels since the orientation changed. The las argument controls the orientation of axis labels.\n\n\n\n\n\n\nWhile bar plots work great for categorical data, histograms are designed for continuous numeric data. A histogram divides the range of values into intervals (called “bins”) and shows how many observations fall into each bin. This gives you a picture of the data’s distribution.\nThe hist() function creates histograms in R:\n\n# Basic histogram of miles per gallon\nhist(\n  mtcars$mpg,\n  main = \"Distribution of Miles Per Gallon\",\n  xlab = \"Miles Per Gallon (mpg)\",\n  ylab = \"Frequency\",\n  col = \"lightblue\",\n  border = \"black\"\n)\n\n\n\n\n\n\n\n\nThis histogram shows us the distribution of fuel efficiency in our car dataset. Most cars get between 15-25 mpg, with a few very fuel-efficient cars getting over 30 mpg.\n\n\n\nOne of the most important decisions when creating a histogram is how many bins to use. Too few bins and you lose detail; too many bins and the pattern becomes hard to see. R chooses a reasonable default, but you can control this with the breaks argument:\n\n# Histogram with specific number of bins\nhist(\n  mtcars$mpg,\n  breaks = 8, # Use exactly 8 bins\n  main = \"MPG Distribution (8 bins)\",\n  xlab = \"Miles Per Gallon\",\n  ylab = \"Frequency\",\n  col = \"palegreen\",\n  border = \"darkgreen\"\n)\n\n\n\n\n\n\n\n# Histogram with specific break points\nhist(\n  mtcars$mpg,\n  breaks = c(10, 15, 20, 25, 30, 35),  # Specify exact bin boundaries\n  main = \"MPG Distribution (Custom bins)\",\n  xlab = \"Miles Per Gallon\",\n  ylab = \"Frequency\",\n  col = \"lightcoral\",\n  border = \"darkred\"\n)\n\n\n\n\n\n\n\n\nThe first approach lets R choose where to place the bin boundaries, but uses your specified number of bins. The second approach gives you complete control over the bin boundaries, which is useful when you want bins of specific sizes or at meaningful breakpoints.\n\n\n\nSometimes instead of showing raw counts, it’s useful to show the proportion of observations in each bin. This is especially helpful when comparing distributions from datasets of different sizes, or when you want to overlay a smooth density curve.\n\n# Density histogram\nhist(\n  mtcars$mpg,\n  freq = FALSE, # This creates a density histogram instead of frequency\n  main = \"MPG Density Distribution\",\n  xlab = \"Miles Per Gallon\",\n  ylab = \"Density\",\n  col = \"lightyellow\",\n  border = \"orange\"\n)\n\n# Add a smooth density curve\nlines(density(mtcars$mpg), col = \"red\", lwd = 2)\n\n\n\n\n\n\n\n\nThe density curve (red line) shows a smooth estimate of the underlying distribution. The area under both the histogram bars and the density curve equals 1.0, representing the total probability.\n\n\n\nOften you want to compare the distribution of a variable across different groups. One approach is to create side-by-side histograms. We’ll compare the fuel efficiency of automatic versus manual transmission cars:\n\n# Set up plotting area for multiple plots side by side\npar(mfrow = c(1, 2))  # 1 row, 2 columns\n\n# Histogram for automatic transmission cars (am = 0)\nauto_mpg &lt;- mtcars$mpg[mtcars$am == 0]  # Extract mpg values for automatic cars\nhist(\n  auto_mpg,\n  main = \"MPG: Automatic Transmission\",\n  xlab = \"Miles Per Gallon\",\n  ylab = \"Frequency\",\n  col = \"lightblue\",\n  xlim = c(10, 35), # Same x-axis range for both plots\n  ylim = c(0, 8)    # Same y-axis range for both plots\n)\n\n# Histogram for manual transmission cars (am = 1)\nmanual_mpg &lt;- mtcars$mpg[mtcars$am == 1]  # Extract mpg values for manual cars\nhist(\n  manual_mpg,\n  main = \"MPG: Manual Transmission\",\n  xlab = \"Miles Per Gallon\",\n  ylab = \"Frequency\",\n  col = \"lightcoral\",\n  xlim = c(10, 35), # Same x-axis range for both plots\n  ylim = c(0, 8)    # Same y-axis range for both plots\n)\n\n\n\n\n\n\n\n# Reset plotting parameters to default (single plot)\npar(mfrow = c(1, 1))\n\nUsing the same axis ranges (xlim and ylim) makes it easier to compare the two distributions. From these histograms, we can see that manual transmission cars tend to have higher fuel efficiency than automatic transmission cars.\n\n\n\n\n\n\nSometimes you want to create a frequency table for continuous data, similar to what a histogram shows but in table form. To do this, you first need to group the continuous values into bins using the cut() function:\n\n# Create bins for miles per gallon\nmpg_bins &lt;- cut(\n  mtcars$mpg,\n  breaks = c(10, 15, 20, 25, 30, 35),                     \n  labels = c(\"10-15\", \"15-20\", \"20-25\", \"25-30\", \"30-35\"),\n  include.lowest = TRUE\n)\n\n# Create frequency table from the binned data\nmpg_freq &lt;- table(mpg_bins)\nmpg_freq\n\nmpg_bins\n10-15 15-20 20-25 25-30 30-35 \n    6    12     8     2     4 \n\n# Calculate cumulative frequencies\nmpg_cumfreq &lt;- cumsum(mpg_freq)\nmpg_cumfreq\n\n10-15 15-20 20-25 25-30 30-35 \n    6    18    26    28    32 \n\n\nThe cut() function transforms continuous data into categorical data by assigning each value to a bin. This lets you apply all the frequency table techniques we learned earlier to continuous variables.\n\n\n\nLet’s combine all our techniques to perform a complete frequency analysis. This demonstrates how to systematically examine a categorical variable:\n\n# Complete frequency analysis for cylinder data\ncat(\"=== FREQUENCY ANALYSIS: ENGINE CYLINDERS ===\\n\\n\")\n\n=== FREQUENCY ANALYSIS: ENGINE CYLINDERS ===\n\n# Basic frequency table\nfreq &lt;- table(mtcars$cyl)\ncat(\"Frequency Table:\\n\")\n\nFrequency Table:\n\nprint(freq)\n\n\n 4  6  8 \n11  7 14 \n\ncat(\"\\nProportion Table:\\n\")\n\n\nProportion Table:\n\nprop &lt;- prop.table(freq)\nprint(round(prop, 3))  # Round to 3 decimal places for readability\n\n\n    4     6     8 \n0.344 0.219 0.438 \n\ncat(\"\\nPercentage Table:\\n\")\n\n\nPercentage Table:\n\npercent &lt;- prop.table(freq) * 100\nprint(round(percent, 1))  # Round to 1 decimal place\n\n\n   4    6    8 \n34.4 21.9 43.8 \n\ncat(\"\\nCumulative Frequencies:\\n\")\n\n\nCumulative Frequencies:\n\ncumfreq &lt;- cumsum(freq)\nprint(cumfreq)\n\n 4  6  8 \n11 18 32 \n\ncat(\"\\nCumulative Proportions:\\n\")\n\n\nCumulative Proportions:\n\ncumprop &lt;- cumsum(prop)\nprint(round(cumprop, 3))\n\n    4     6     8 \n0.344 0.562 1.000 \n\n\nThis helps you understand how the variable is distributed in your dataset.\n\n\n\nWhen you create a histogram, R actually calculates a lot of information behind the scenes. You can access this information by storing the histogram in a variable (using plot = FALSE to prevent it from displaying):\n\n# Store histogram information without plotting\nmpg_hist &lt;- hist(mtcars$mpg, plot = FALSE)\n\n# Examine the structure of the histogram object\nstr(mpg_hist)\n\nList of 6\n $ breaks  : int [1:6] 10 15 20 25 30 35\n $ counts  : int [1:5] 6 12 8 2 4\n $ density : num [1:5] 0.0375 0.075 0.05 0.0125 0.025\n $ mids    : num [1:5] 12.5 17.5 22.5 27.5 32.5\n $ xname   : chr \"mtcars$mpg\"\n $ equidist: logi TRUE\n - attr(*, \"class\")= chr \"histogram\"\n\n# Access specific components\ncat(\"Bin breaks (boundaries):\", mpg_hist$breaks, \"\\n\")\n\nBin breaks (boundaries): 10 15 20 25 30 35 \n\ncat(\"Bin counts (frequencies):\", mpg_hist$counts, \"\\n\")\n\nBin counts (frequencies): 6 12 8 2 4 \n\ncat(\"Bin midpoints:\", mpg_hist$mids, \"\\n\")\n\nBin midpoints: 12.5 17.5 22.5 27.5 32.5 \n\n\nThis information can be useful for further analysis or for creating custom visualizations. The breaks show where each bin starts and ends, counts show how many observations are in each bin (the bar heights), and mids show the center point of each bin.\n\n\n\n\nLet’s use our techniques to analyze car performance:\n\n# Analyze the distribution of horsepower\nhp_hist &lt;- hist(\n  mtcars$hp,\n  breaks = 10,\n  main = \"Distribution of Horsepower\",\n  xlab = \"Horsepower\",\n  ylab = \"Frequency\",\n  col = \"lightsteelblue\",\n  border = \"navy\"\n)\n\n\n\n\n\n\n\n# Identify cars with unusual horsepower\nmean_hp &lt;- mean(mtcars$hp)\nsd_hp &lt;- sd(mtcars$hp)\n\n# Cars with horsepower more than 2 standard deviations from mean\nunusual_cars &lt;- subset(mtcars, abs(hp - mean_hp) &gt; 2 * sd_hp)\ncat(\"Cars with unusual horsepower:\\n\")\n\nCars with unusual horsepower:\n\nprint(row.names(unusual_cars))\n\n[1] \"Maserati Bora\"\n\n\n\n\n\nExercise 1: Create a frequency table for the carb variable (number of carburetors) in the mtcars dataset. Calculate both frequencies and percentages.\nExercise 2: Create a histogram of the wt variable (weight) with 6 bins. Add appropriate titles and labels.\nExercise 3: Create a grouped bar plot showing the relationship between gear (number of gears) and cyl (number of cylinders).\nExercise 4: Using the airquality dataset, create a frequency table for the Month variable and calculate cumulative frequencies.\n\n\n\nWhen working with frequency analysis in R, keep these essential points in mind:\n\nUse table() for creating frequency tables from categorical or discrete data\nApply prop.table() to convert frequencies to proportions - these are often more meaningful than raw counts\nEmploy cumsum() to calculate cumulative frequencies - useful for ordered categories\nUse barplot() for categorical data visualization - the standard way to display frequency tables graphically\nUse hist() for continuous data visualization - shows the shape and spread of your data’s distribution\nControl histogram bins carefully - the breaks argument lets you specify the number of bins or exact bin boundaries\nAlways add meaningful titles and axis labels to your plots - this makes them much easier to understand\nConsider your audience when choosing between frequencies, proportions, or percentages - percentages are often most intuitive\nUse the cut() function to create frequency tables for continuous data by grouping values into bins\nRemember that bar plots are for categorical data, histograms are for continuous data - this is a fundamental distinction in data visualization\n\nThe combination of frequency tables and visual displays gives you a solid foundation for understanding your data’s distribution and identifying patterns that might need closer examination. These techniques will serve as building blocks for more advanced statistical analyses you’ll learn later."
  },
  {
    "objectID": "lab_02.html#introduction",
    "href": "lab_02.html#introduction",
    "title": "Lab 2",
    "section": "",
    "text": "Understanding the distribution of data is fundamental to statistical analysis. For this lab, we’ll create frequency tables, calculate cumulative frequencies, and visualize distributions using bar plots and histograms using basic R functions.\n\n\nR comes with many built-in datasets that are great for learning and practicing data analysis techniques. These datasets are immediately available without needing to load external files. Try the running the code below on your computer.\n\n# See all available built-in datasets\nlibrary(datasets)\ndata()\n\nWe’ll use the mtcars dataset, which contains information about 32 automobiles from a 1974 Motor Trend magazine. This dataset is popular in R tutorials and instructional materials because it’s relatively small, easy to understand, and contains both categorical and continuous variables.\nLet’s begin by examining our dataset:\n\n# Load and examine the mtcars dataset\ndata(mtcars)\nhead(mtcars)\n\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n\nstr(mtcars)\n\n'data.frame':   32 obs. of  11 variables:\n $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...\n $ disp: num  160 160 108 258 360 ...\n $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...\n $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n $ qsec: num  16.5 17 18.6 19.4 17 ...\n $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...\n $ am  : num  1 1 1 0 0 0 0 0 0 0 ...\n $ gear: num  4 4 4 3 3 3 3 4 4 4 ...\n $ carb: num  4 4 1 1 2 1 4 2 2 4 ...\n\n\nThe mtcars dataset contains 32 observations (cars) and 11 variables including miles per gallon (mpg), number of cylinders (cyl), horsepower (hp), and transmission type (am, where 0=automatic and 1=manual)."
  },
  {
    "objectID": "lab_02.html#frequency-tables",
    "href": "lab_02.html#frequency-tables",
    "title": "Lab 2",
    "section": "",
    "text": "A frequency table shows how often each unique value appears in your data. This is especially useful for categorical variables (like the number of cylinders in a car engine) or discrete numeric variables. The table() function is your primary tool for creating frequency tables in R.\nLet’s create a frequency table for the number of cylinders in our cars:\n\n# Create a frequency table for number of cylinders\ncyl_freq &lt;- table(mtcars$cyl)\ncyl_freq\n\n\n 4  6  8 \n11  7 14 \n\n\nThis output tells us that 11 cars have 4 cylinders, 7 cars have 6 cylinders, and 14 cars have 8 cylinders. The table() function automatically counts each unique value and presents the results.\n\n\n\nWhile raw frequencies tell us how many observations fall into each category, proportions (also called relative frequencies) tell us what proportion of the total each category represents.\nTo convert frequencies to proportions, use the prop.table() function:\n\n# Calculate proportions\ncyl_prop &lt;- prop.table(cyl_freq)\ncyl_prop\n\n\n      4       6       8 \n0.34375 0.21875 0.43750 \n\n# Convert to percentages (multiply by 100)\ncyl_percent &lt;- prop.table(cyl_freq) * 100\ncyl_percent\n\n\n     4      6      8 \n34.375 21.875 43.750 \n\n\nNow we can see that approximately 34% of cars have 4 cylinders, 22% have 6 cylinders, and 44% have 8 cylinders. Percentages are sometimes easier to interpret and communicate to others than raw proportions.\n\n\n\nCumulative frequencies show the running total of frequencies up to and including each category. They answer questions like “How many cars have 6 cylinders or fewer?” This is useful when your categories have a natural ordering (like our cylinder counts: 4, 6, 8).\nUse the cumsum() function to calculate cumulative frequencies:\n\n# Calculate cumulative frequencies\ncyl_cumfreq &lt;- cumsum(cyl_freq)\ncyl_cumfreq\n\n 4  6  8 \n11 18 32 \n\n# Create a comprehensive frequency table combining all our calculations\nfreq_table &lt;- data.frame(\n  Cylinders = names(cyl_freq),\n  Frequency = as.numeric(cyl_freq),\n  Proportion = as.numeric(cyl_prop),\n  Percentage = as.numeric(cyl_percent),\n  Cumulative_Freq = as.numeric(cyl_cumfreq),\n  Cumulative_Prop = cumsum(as.numeric(cyl_prop))\n)\nfreq_table\n\n  Cylinders Frequency Proportion Percentage Cumulative_Freq Cumulative_Prop\n1         4        11    0.34375     34.375              11         0.34375\n2         6         7    0.21875     21.875              18         0.56250\n3         8        14    0.43750     43.750              32         1.00000\n\n\nLooking at our cumulative frequencies, we can see that 18 cars (11 + 7) have 6 cylinders or fewer, and all 32 cars have 8 cylinders or fewer (which makes sense since 8 is the maximum in our dataset)."
  },
  {
    "objectID": "lab_02.html#bar-plots",
    "href": "lab_02.html#bar-plots",
    "title": "Lab 2",
    "section": "",
    "text": "Bar plots (also called bar charts) are a common way to visualize categorical data. Each bar’s height represents the frequency (count) of that category. The barplot() function in base R creates bar charts from frequency tables or vectors.\nLet’s create a basic bar plot of our cylinder frequencies:\n\n# Basic bar plot of cylinder frequencies\nbarplot(\n  cyl_freq,\n  main = \"Frequency of Cylinder Counts\",\n  xlab = \"Number of Cylinders\",\n  ylab = \"Frequency\",\n  col = \"lightblue\",\n  border = \"black\"\n)\n\n\n\n\n\n\n\n\nThe main argument adds a title, xlab and ylab add axis labels, col sets the bar color, and border sets the color of the bar outlines. Good labels make your plots much easier to understand.\n\n\n\nSometimes horizontal bar plots are easier to read, especially when category names are long. You can create these by adding the horiz = TRUE argument:\n\n# Horizontal bar plot\nbarplot(\n  cyl_freq,\n  main = \"Cylinder Distribution\",\n  xlab = \"Frequency\",        # Note: x and y labels are swapped\n  ylab = \"Number of Cylinders\",\n  col = \"orange\",\n  horiz = TRUE,             # Make bars horizontal\n  las = 1                   # las=1 makes y-axis labels horizontal\n)                  \n\n\n\n\n\n\n\n\nNotice how we swapped the x and y axis labels since the orientation changed. The las argument controls the orientation of axis labels."
  },
  {
    "objectID": "lab_02.html#histograms",
    "href": "lab_02.html#histograms",
    "title": "Lab 2",
    "section": "",
    "text": "While bar plots work great for categorical data, histograms are designed for continuous numeric data. A histogram divides the range of values into intervals (called “bins”) and shows how many observations fall into each bin. This gives you a picture of the data’s distribution.\nThe hist() function creates histograms in R:\n\n# Basic histogram of miles per gallon\nhist(\n  mtcars$mpg,\n  main = \"Distribution of Miles Per Gallon\",\n  xlab = \"Miles Per Gallon (mpg)\",\n  ylab = \"Frequency\",\n  col = \"lightblue\",\n  border = \"black\"\n)\n\n\n\n\n\n\n\n\nThis histogram shows us the distribution of fuel efficiency in our car dataset. Most cars get between 15-25 mpg, with a few very fuel-efficient cars getting over 30 mpg.\n\n\n\nOne of the most important decisions when creating a histogram is how many bins to use. Too few bins and you lose detail; too many bins and the pattern becomes hard to see. R chooses a reasonable default, but you can control this with the breaks argument:\n\n# Histogram with specific number of bins\nhist(\n  mtcars$mpg,\n  breaks = 8, # Use exactly 8 bins\n  main = \"MPG Distribution (8 bins)\",\n  xlab = \"Miles Per Gallon\",\n  ylab = \"Frequency\",\n  col = \"palegreen\",\n  border = \"darkgreen\"\n)\n\n\n\n\n\n\n\n# Histogram with specific break points\nhist(\n  mtcars$mpg,\n  breaks = c(10, 15, 20, 25, 30, 35),  # Specify exact bin boundaries\n  main = \"MPG Distribution (Custom bins)\",\n  xlab = \"Miles Per Gallon\",\n  ylab = \"Frequency\",\n  col = \"lightcoral\",\n  border = \"darkred\"\n)\n\n\n\n\n\n\n\n\nThe first approach lets R choose where to place the bin boundaries, but uses your specified number of bins. The second approach gives you complete control over the bin boundaries, which is useful when you want bins of specific sizes or at meaningful breakpoints.\n\n\n\nSometimes instead of showing raw counts, it’s useful to show the proportion of observations in each bin. This is especially helpful when comparing distributions from datasets of different sizes, or when you want to overlay a smooth density curve.\n\n# Density histogram\nhist(\n  mtcars$mpg,\n  freq = FALSE, # This creates a density histogram instead of frequency\n  main = \"MPG Density Distribution\",\n  xlab = \"Miles Per Gallon\",\n  ylab = \"Density\",\n  col = \"lightyellow\",\n  border = \"orange\"\n)\n\n# Add a smooth density curve\nlines(density(mtcars$mpg), col = \"red\", lwd = 2)\n\n\n\n\n\n\n\n\nThe density curve (red line) shows a smooth estimate of the underlying distribution. The area under both the histogram bars and the density curve equals 1.0, representing the total probability.\n\n\n\nOften you want to compare the distribution of a variable across different groups. One approach is to create side-by-side histograms. We’ll compare the fuel efficiency of automatic versus manual transmission cars:\n\n# Set up plotting area for multiple plots side by side\npar(mfrow = c(1, 2))  # 1 row, 2 columns\n\n# Histogram for automatic transmission cars (am = 0)\nauto_mpg &lt;- mtcars$mpg[mtcars$am == 0]  # Extract mpg values for automatic cars\nhist(\n  auto_mpg,\n  main = \"MPG: Automatic Transmission\",\n  xlab = \"Miles Per Gallon\",\n  ylab = \"Frequency\",\n  col = \"lightblue\",\n  xlim = c(10, 35), # Same x-axis range for both plots\n  ylim = c(0, 8)    # Same y-axis range for both plots\n)\n\n# Histogram for manual transmission cars (am = 1)\nmanual_mpg &lt;- mtcars$mpg[mtcars$am == 1]  # Extract mpg values for manual cars\nhist(\n  manual_mpg,\n  main = \"MPG: Manual Transmission\",\n  xlab = \"Miles Per Gallon\",\n  ylab = \"Frequency\",\n  col = \"lightcoral\",\n  xlim = c(10, 35), # Same x-axis range for both plots\n  ylim = c(0, 8)    # Same y-axis range for both plots\n)\n\n\n\n\n\n\n\n# Reset plotting parameters to default (single plot)\npar(mfrow = c(1, 1))\n\nUsing the same axis ranges (xlim and ylim) makes it easier to compare the two distributions. From these histograms, we can see that manual transmission cars tend to have higher fuel efficiency than automatic transmission cars."
  },
  {
    "objectID": "lab_02.html#advanced-techniques",
    "href": "lab_02.html#advanced-techniques",
    "title": "Lab 2",
    "section": "",
    "text": "Sometimes you want to create a frequency table for continuous data, similar to what a histogram shows but in table form. To do this, you first need to group the continuous values into bins using the cut() function:\n\n# Create bins for miles per gallon\nmpg_bins &lt;- cut(\n  mtcars$mpg,\n  breaks = c(10, 15, 20, 25, 30, 35),                     \n  labels = c(\"10-15\", \"15-20\", \"20-25\", \"25-30\", \"30-35\"),\n  include.lowest = TRUE\n)\n\n# Create frequency table from the binned data\nmpg_freq &lt;- table(mpg_bins)\nmpg_freq\n\nmpg_bins\n10-15 15-20 20-25 25-30 30-35 \n    6    12     8     2     4 \n\n# Calculate cumulative frequencies\nmpg_cumfreq &lt;- cumsum(mpg_freq)\nmpg_cumfreq\n\n10-15 15-20 20-25 25-30 30-35 \n    6    18    26    28    32 \n\n\nThe cut() function transforms continuous data into categorical data by assigning each value to a bin. This lets you apply all the frequency table techniques we learned earlier to continuous variables.\n\n\n\nLet’s combine all our techniques to perform a complete frequency analysis. This demonstrates how to systematically examine a categorical variable:\n\n# Complete frequency analysis for cylinder data\ncat(\"=== FREQUENCY ANALYSIS: ENGINE CYLINDERS ===\\n\\n\")\n\n=== FREQUENCY ANALYSIS: ENGINE CYLINDERS ===\n\n# Basic frequency table\nfreq &lt;- table(mtcars$cyl)\ncat(\"Frequency Table:\\n\")\n\nFrequency Table:\n\nprint(freq)\n\n\n 4  6  8 \n11  7 14 \n\ncat(\"\\nProportion Table:\\n\")\n\n\nProportion Table:\n\nprop &lt;- prop.table(freq)\nprint(round(prop, 3))  # Round to 3 decimal places for readability\n\n\n    4     6     8 \n0.344 0.219 0.438 \n\ncat(\"\\nPercentage Table:\\n\")\n\n\nPercentage Table:\n\npercent &lt;- prop.table(freq) * 100\nprint(round(percent, 1))  # Round to 1 decimal place\n\n\n   4    6    8 \n34.4 21.9 43.8 \n\ncat(\"\\nCumulative Frequencies:\\n\")\n\n\nCumulative Frequencies:\n\ncumfreq &lt;- cumsum(freq)\nprint(cumfreq)\n\n 4  6  8 \n11 18 32 \n\ncat(\"\\nCumulative Proportions:\\n\")\n\n\nCumulative Proportions:\n\ncumprop &lt;- cumsum(prop)\nprint(round(cumprop, 3))\n\n    4     6     8 \n0.344 0.562 1.000 \n\n\nThis helps you understand how the variable is distributed in your dataset.\n\n\n\nWhen you create a histogram, R actually calculates a lot of information behind the scenes. You can access this information by storing the histogram in a variable (using plot = FALSE to prevent it from displaying):\n\n# Store histogram information without plotting\nmpg_hist &lt;- hist(mtcars$mpg, plot = FALSE)\n\n# Examine the structure of the histogram object\nstr(mpg_hist)\n\nList of 6\n $ breaks  : int [1:6] 10 15 20 25 30 35\n $ counts  : int [1:5] 6 12 8 2 4\n $ density : num [1:5] 0.0375 0.075 0.05 0.0125 0.025\n $ mids    : num [1:5] 12.5 17.5 22.5 27.5 32.5\n $ xname   : chr \"mtcars$mpg\"\n $ equidist: logi TRUE\n - attr(*, \"class\")= chr \"histogram\"\n\n# Access specific components\ncat(\"Bin breaks (boundaries):\", mpg_hist$breaks, \"\\n\")\n\nBin breaks (boundaries): 10 15 20 25 30 35 \n\ncat(\"Bin counts (frequencies):\", mpg_hist$counts, \"\\n\")\n\nBin counts (frequencies): 6 12 8 2 4 \n\ncat(\"Bin midpoints:\", mpg_hist$mids, \"\\n\")\n\nBin midpoints: 12.5 17.5 22.5 27.5 32.5 \n\n\nThis information can be useful for further analysis or for creating custom visualizations. The breaks show where each bin starts and ends, counts show how many observations are in each bin (the bar heights), and mids show the center point of each bin."
  },
  {
    "objectID": "lab_02.html#practical-applications",
    "href": "lab_02.html#practical-applications",
    "title": "Lab 2",
    "section": "",
    "text": "Let’s use our techniques to analyze car performance:\n\n# Analyze the distribution of horsepower\nhp_hist &lt;- hist(\n  mtcars$hp,\n  breaks = 10,\n  main = \"Distribution of Horsepower\",\n  xlab = \"Horsepower\",\n  ylab = \"Frequency\",\n  col = \"lightsteelblue\",\n  border = \"navy\"\n)\n\n\n\n\n\n\n\n# Identify cars with unusual horsepower\nmean_hp &lt;- mean(mtcars$hp)\nsd_hp &lt;- sd(mtcars$hp)\n\n# Cars with horsepower more than 2 standard deviations from mean\nunusual_cars &lt;- subset(mtcars, abs(hp - mean_hp) &gt; 2 * sd_hp)\ncat(\"Cars with unusual horsepower:\\n\")\n\nCars with unusual horsepower:\n\nprint(row.names(unusual_cars))\n\n[1] \"Maserati Bora\""
  },
  {
    "objectID": "lab_02.html#practice-problems",
    "href": "lab_02.html#practice-problems",
    "title": "Lab 2",
    "section": "",
    "text": "Exercise 1: Create a frequency table for the carb variable (number of carburetors) in the mtcars dataset. Calculate both frequencies and percentages.\nExercise 2: Create a histogram of the wt variable (weight) with 6 bins. Add appropriate titles and labels.\nExercise 3: Create a grouped bar plot showing the relationship between gear (number of gears) and cyl (number of cylinders).\nExercise 4: Using the airquality dataset, create a frequency table for the Month variable and calculate cumulative frequencies."
  },
  {
    "objectID": "lab_02.html#key-points-to-remember",
    "href": "lab_02.html#key-points-to-remember",
    "title": "Lab 2",
    "section": "",
    "text": "When working with frequency analysis in R, keep these essential points in mind:\n\nUse table() for creating frequency tables from categorical or discrete data\nApply prop.table() to convert frequencies to proportions - these are often more meaningful than raw counts\nEmploy cumsum() to calculate cumulative frequencies - useful for ordered categories\nUse barplot() for categorical data visualization - the standard way to display frequency tables graphically\nUse hist() for continuous data visualization - shows the shape and spread of your data’s distribution\nControl histogram bins carefully - the breaks argument lets you specify the number of bins or exact bin boundaries\nAlways add meaningful titles and axis labels to your plots - this makes them much easier to understand\nConsider your audience when choosing between frequencies, proportions, or percentages - percentages are often most intuitive\nUse the cut() function to create frequency tables for continuous data by grouping values into bins\nRemember that bar plots are for categorical data, histograms are for continuous data - this is a fundamental distinction in data visualization\n\nThe combination of frequency tables and visual displays gives you a solid foundation for understanding your data’s distribution and identifying patterns that might need closer examination. These techniques will serve as building blocks for more advanced statistical analyses you’ll learn later."
  },
  {
    "objectID": "pset_01.html#descriptive-statistics",
    "href": "pset_01.html#descriptive-statistics",
    "title": "PSET 1 Practice",
    "section": "",
    "text": "Let’s learn how to calculate mean, median, mode, standard deviation, and range.\n\n\n\n# Mean - average value\nmean(mtcars$mpg)\n\n[1] 20.09062\n\n# Median - middle value when data is ordered\nmedian(mtcars$mpg)\n\n[1] 19.2\n\n# Standard deviation - measure of variability\nsd(mtcars$mpg)\n\n[1] 6.026948\n\n# Minimum and maximum values\nmin(mtcars$mpg)\n\n[1] 10.4\n\nmax(mtcars$mpg)\n\n[1] 33.9\n\n# Range - difference between max and min\nrange(mtcars$mpg)  # This gives min and max\n\n[1] 10.4 33.9\n\nmax(mtcars$mpg) - min(mtcars$mpg)  # This gives the range as a single number\n\n[1] 23.5\n\n\n\n\n\nR doesn’t have a built-in mode function, so we need to create one or use the table() function:\n\n# Find the mode using table() - most frequent value\ncyl_table &lt;- table(mtcars$cyl)\ncyl_mode &lt;- as.numeric(names(cyl_table)[cyl_table == max(cyl_table)])\ncyl_mode\n\n[1] 8\n\n# Alternative: Create a mode function\nget_mode &lt;- function(x) {\n  freq_table &lt;- table(x)\n  mode_value &lt;- names(freq_table)[freq_table == max(freq_table)]\n  return(as.numeric(mode_value))\n}\n\n# Test our function\nget_mode(mtcars$cyl)  # Number of cylinders should have a clear mode\n\n[1] 8\n\n\n\n\n\nLet’s create a table with all descriptive statistics for multiple variables:\n\n# Function to calculate all statistics for a variable\ncalc_stats &lt;- function(x, var_name) {\n  mean_val &lt;- round(mean(x, na.rm = TRUE), 2)\n  median_val &lt;- round(median(x, na.rm = TRUE), 2)\n  sd_val &lt;- round(sd(x, na.rm = TRUE), 2)\n  min_val &lt;- round(min(x, na.rm = TRUE), 2)\n  max_val &lt;- round(max(x, na.rm = TRUE), 2)\n\n  return(data.frame(\n    Variable = var_name,\n    Mean = mean_val,\n    Median = median_val,\n    SD = sd_val,\n    Min = min_val,\n    Max = max_val\n  ))\n}\n\n# Calculate statistics for multiple variables\nstats_mpg &lt;- calc_stats(mtcars$mpg, \"MPG\")\nstats_hp &lt;- calc_stats(mtcars$hp, \"Horsepower\")\nstats_wt &lt;- calc_stats(mtcars$wt, \"Weight\")\nstats_cyl &lt;- calc_stats(mtcars$cyl, \"Cylinders\")\n\n# Combine into one table\ndescriptive_table &lt;- rbind(stats_mpg, stats_hp, stats_wt, stats_cyl)\nprint(descriptive_table)\n\n    Variable   Mean Median    SD   Min    Max\n1        MPG  20.09  19.20  6.03 10.40  33.90\n2 Horsepower 146.69 123.00 68.56 52.00 335.00\n3     Weight   3.22   3.33  0.98  1.51   5.42\n4  Cylinders   6.19   6.00  1.79  4.00   8.00\n\n\n\n\n\nR also provides convenient summary functions:\n\n# Summary function gives quartiles and mean\nsummary(mtcars$mpg)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  10.40   15.43   19.20   20.09   22.80   33.90 \n\n# For multiple variables at once\nsummary(mtcars[c(\"mpg\", \"hp\", \"wt\", \"cyl\")])\n\n      mpg              hp              wt             cyl       \n Min.   :10.40   Min.   : 52.0   Min.   :1.513   Min.   :4.000  \n 1st Qu.:15.43   1st Qu.: 96.5   1st Qu.:2.581   1st Qu.:4.000  \n Median :19.20   Median :123.0   Median :3.325   Median :6.000  \n Mean   :20.09   Mean   :146.7   Mean   :3.217   Mean   :6.188  \n 3rd Qu.:22.80   3rd Qu.:180.0   3rd Qu.:3.610   3rd Qu.:8.000  \n Max.   :33.90   Max.   :335.0   Max.   :5.424   Max.   :8.000"
  },
  {
    "objectID": "pset_01.html#manual-calculations-sort-of",
    "href": "pset_01.html#manual-calculations-sort-of",
    "title": "PSET 1 Practice",
    "section": "",
    "text": "Sometimes you need to calculate statistics the hard way to understand the formulas. Let’s practice with a small dataset:\n\n# Small dataset for manual calculation practice\nvalues &lt;- c(4, 10, 9, 13, 7)\nvalues\n\n[1]  4 10  9 13  7\n\n# Calculate mean manually\nmean_manual &lt;- sum(values) / length(values)\ncat(\"Manual mean calculation:\", mean_manual, \"\\n\")\n\nManual mean calculation: 8.6 \n\ncat(\"R mean function:\", mean(values), \"\\n\")\n\nR mean function: 8.6 \n\n# Calculate median manually\nsorted_values &lt;- sort(values)\nn &lt;- length(values)\nif (n %% 2 == 1) {\n  median_manual &lt;- sorted_values[(n + 1) / 2]\n} else {\n  median_manual &lt;- (sorted_values[n/2] + sorted_values[n/2 + 1]) / 2\n}\ncat(\"Manual median calculation:\", median_manual, \"\\n\")\n\nManual median calculation: 9 \n\ncat(\"R median function:\", median(values), \"\\n\")\n\nR median function: 9 \n\n# Calculate standard deviation manually\nmean_val &lt;- mean(values)\nsquared_deviations &lt;- (values - mean_val)^2\nvariance_manual &lt;- sum(squared_deviations) / (length(values) - 1)  # Sample variance\nsd_manual &lt;- sqrt(variance_manual)\ncat(\"Manual SD calculation:\", round(sd_manual, 4), \"\\n\")\n\nManual SD calculation: 3.3615 \n\ncat(\"R sd function:\", round(sd(values), 4), \"\\n\")\n\nR sd function: 3.3615 \n\n\n\n\n\n# Add an outlier and see the effect\nvalues_with_outlier &lt;- c(4, 10, 9, 13, 7, 138)\n\n# Compare statistics\ncat(\"Original data: 4, 10, 9, 13, 7\\n\")\n\nOriginal data: 4, 10, 9, 13, 7\n\ncat(\"Mean:\", round(mean(values), 2), \"| Median:\", median(values), \"| SD:\", round(sd(values), 2), \"\\n\\n\")\n\nMean: 8.6 | Median: 9 | SD: 3.36 \n\ncat(\"With outlier: 4, 10, 9, 13, 7, 138\\n\")\n\nWith outlier: 4, 10, 9, 13, 7, 138\n\ncat(\"Mean:\", round(mean(values_with_outlier), 2), \"| Median:\", median(values_with_outlier), \"| SD:\", round(sd(values_with_outlier), 2), \"\\n\\n\")\n\nMean: 30.17 | Median: 9.5 | SD: 52.91 \n\ncat(\"The outlier dramatically affects the mean and standard deviation.\\n\")\n\nThe outlier dramatically affects the mean and standard deviation."
  },
  {
    "objectID": "bonus_01.html",
    "href": "bonus_01.html",
    "title": "Working with Files and Directories in R",
    "section": "",
    "text": "One of the most common frustrations for new R users is the “Error: cannot open the connection” or “No such file or directory” message. These errors almost always mean that R can’t find your data file. Learning how to manage files and directories is very important for data analysis. After all, you can’t analyze data that R can’t find.\nIn this lesson, you’ll learn some basic skills for working with files in R. We’ll start with the basics of how computers organize files, then move on to reading CSV and Excel files.\nDon’t worry if this seems technical at first. We’ll take it step by step and focus on practical, simple approaches that work reliably."
  },
  {
    "objectID": "bonus_01.html#introduction",
    "href": "bonus_01.html#introduction",
    "title": "Working with Files and Directories in R",
    "section": "",
    "text": "One of the most common frustrations for new R users is the “Error: cannot open the connection” or “No such file or directory” message. These errors almost always mean that R can’t find your data file. Learning how to manage files and directories is very important for data analysis. After all, you can’t analyze data that R can’t find.\nIn this lesson, you’ll learn some basic skills for working with files in R. We’ll start with the basics of how computers organize files, then move on to reading CSV and Excel files.\nDon’t worry if this seems technical at first. We’ll take it step by step and focus on practical, simple approaches that work reliably."
  },
  {
    "objectID": "bonus_01.html#understanding-files-and-folders-on-your-computer",
    "href": "bonus_01.html#understanding-files-and-folders-on-your-computer",
    "title": "Working with Files and Directories in R",
    "section": "Understanding Files and Folders on Your Computer",
    "text": "Understanding Files and Folders on Your Computer\nBefore we jump into R, let’s make sure we understand how your computer organizes information.\n\nWhat Are Files and Folders?\nThink of your computer like a giant filing cabinet: - Files are like individual documents (your data, photos, etc.) - Folders (also called directories) are like file folders that organize related files - File paths are like the address that tells you exactly where a file lives\n\n\nFile Extensions Tell You What Kind of File You Have\nThe letters after the dot in a filename tell you what type of file it is: - .csv - Comma Separated Values (spreadsheet data in a simple format) - .xlsx - Excel spreadsheet file - .txt - Plain text file - .R - R script file - .qmd - Quarto markdown file - .dta - Stata file\nFor data analysis, you’ll most commonly work with .csv and .xlsx files.\n\n\nWhere Do Files Live?\nOn your computer, files are stored in a hierarchical structure. Common locations include: - Desktop - Files you can see on your desktop - Documents - Your main documents folder - Downloads - Where files from the internet usually go - OneDrive/Google Drive - Cloud storage folders"
  },
  {
    "objectID": "bonus_01.html#working-with-directories-any-r-environment",
    "href": "bonus_01.html#working-with-directories-any-r-environment",
    "title": "Working with Files and Directories in R",
    "section": "Working with Directories (Any R Environment)",
    "text": "Working with Directories (Any R Environment)\n\nWhat Is a Working Directory?\nR’s working directory is like its “home base”—the folder where R automatically looks for files and saves new files. Think of it as R’s current location on your computer.\nWhen you tell R to read a file called “pset1.csv”, R looks for that file in its working directory. If the file is somewhere else, R gets confused and gives you an error.\n\n\nFinding Where R Is Currently Looking\nUse the getwd() function (get working directory) to see where R is currently “sitting”:\n\n# See R's current working directory\ngetwd()\n\nThis shows you the full path to R’s current location. The output will look different depending on your operating system: - Windows: Something like “C:/Users/YourName/Documents” - Mac/Linux: Something like “/Users/YourName/Documents”\n\n\nSeeing What Files R Can Find\nUse list.files() to see all the files in R’s current working directory:\n\n# List all files in the current directory\nlist.files()\n\n# List only CSV files\nlist.files(pattern = \".csv\")\n\n# List only Excel files\nlist.files(pattern = \".xlsx\")\n\nThis is incredibly useful for checking whether your data file is where R expects it to be.\n\n\nThe Simple Approach: Keep Everything Together\nThe easiest way to avoid file path problems is to put your data files in the same folder as your R script. Here’s the simple workflow:\n\nCreate a new folder for your project (e.g., “My_Analysis”)\nPut your R script in that folder\nPut your data files (pset1.csv, pset1.xlsx) in the same folder\nOpen your R script from that folder\n\nWhen everything is in the same place, you can simply use the filename without worrying about complex paths."
  },
  {
    "objectID": "bonus_01.html#file-paths-made-simple",
    "href": "bonus_01.html#file-paths-made-simple",
    "title": "Working with Files and Directories in R",
    "section": "File Paths Made Simple",
    "text": "File Paths Made Simple\n\nUnderstanding File Paths\nA file path is like a mailing address for your file. It tells the computer exactly where to find something.\nThere are two types of file paths:\nAbsolute paths give the complete address from the very top of your computer: - Windows: \"C:/Users/Hamlet/Documents/My_Project/pset1.csv\" - Mac/Linux: \"/Users/Hamlet/Documents/My_Project/pset1.csv\"\nRelative paths give directions from where you currently are: - \"pset1.csv\" (file is in the same folder as your script) - \"data/pset1.csv\" (file is in a subfolder called “data”)\n\n\nOperating System Differences\nWindows traditionally uses backslashes (\\) in file paths, but R prefers forward slashes (/). R is (usually) smart enough to handle this, so always use forward slashes in your R code:\n\n# Good - works on all systems\ndata &lt;- read.csv(\"pset1.csv\")\n\n# Also good - explicit path with forward slashes\ndata &lt;- read.csv(\"C:/Users/Hamlet/Documents/pset1.csv\")\n\n\n\nQuotation Marks Are Essential\nAlways put file names and paths in quotation marks. R treats text in quotes as literal filenames:\n\n# Correct - filename in quotes\ndata &lt;- read.csv(\"pset1.csv\")\n\n# Wrong - R thinks pset1 is a variable name\ndata &lt;- read.csv(pset1.csv)"
  },
  {
    "objectID": "bonus_01.html#reading-csv-files-the-easy-way",
    "href": "bonus_01.html#reading-csv-files-the-easy-way",
    "title": "Working with Files and Directories in R",
    "section": "Reading CSV Files (The Easy Way)",
    "text": "Reading CSV Files (The Easy Way)\n\nWhat Are CSV Files?\nCSV stands for “Comma Separated Values.” It’s a simple way to store spreadsheet-like data where: - Each row is a separate line - Columns are separated by commas - The first row usually contains column names\nCSV files are great because they’re simple, small, and work with almost any software.\n\n\nThe Basic Command\nThe read.csv() function is built into R. Here’s the simplest way to read a CSV file:\n\n# If your CSV file is in the same folder as your R script\ndata &lt;- read.csv(\"pset1.csv\")\n\n# If your CSV file is in a subfolder called \"data\"\ndata &lt;- read.csv(\"data/pset1.csv\")\n\n# Look at the first few rows\nhead(data)\n\n# Check the structure\nstr(data)\n\n\n\nEssential Arguments for read.csv()\nThe read.csv() function has several helpful arguments:\n\n# Basic read with common options\ndata &lt;- read.csv(\"data/pset1.csv\",\n                 header = TRUE,           # First row contains column names\n                 stringsAsFactors = FALSE) # Keep text as text, not factors\n\n# If your CSV uses semicolons instead of commas\ndata &lt;- read.csv(\"data/pset1.csv\", sep = \";\")\n\n# If missing values are coded as something other than blank\ndata &lt;- read.csv(\"data/pset1.csv\", na.strings = c(\"\", \"NA\", \"missing\", \"999\"))\n\nImportant arguments explained: - header = TRUE: Tells R the first row contains column names (this is usually what you want) - stringsAsFactors = FALSE: Keeps text columns as regular text instead of converting them to factors - sep = \";\": Changes the separator if your file uses semicolons instead of commas - na.strings: Tells R which values should be treated as missing data\n\n\nChecking Your Data Loaded Correctly\nAlways check your data after loading it:\n\n# Load the data\ndata &lt;- read.csv(\"data/pset1.csv\")\n\n# Quick checks\nhead(data)        # See first 6 rows\ntail(data)        # See last 6 rows\nstr(data)         # See structure and data types\nnames(data)       # See column names\nnrow(data)        # Number of rows\nncol(data)        # Number of columns\ndim(data)         # Both dimensions at once\n\n\n\nCommon Problems and Fixes\nProblem: “Error: cannot open the connection” - Solution: The file isn’t where R is looking. Check getwd() and list.files()\nProblem: Column names are weird (X1, X2, X3) - Solution: Your CSV probably doesn’t have headers. Use header = FALSE\nProblem: Numbers are being read as text - Solution: You might have non-numeric characters. Check for symbols like “$” or “,” in your numbers\nProblem: Text looks garbled with strange characters - Solution: Encoding issue. Try read.csv(\"pset1.csv\", encoding = \"UTF-8\")"
  },
  {
    "objectID": "bonus_01.html#reading-excel-files-when-you-need-to",
    "href": "bonus_01.html#reading-excel-files-when-you-need-to",
    "title": "Working with Files and Directories in R",
    "section": "Reading Excel Files (When You Need To)",
    "text": "Reading Excel Files (When You Need To)\n\nWhy Excel Is Trickier Than CSV\nExcel files are more complex than CSV files because they can contain: - Multiple sheets - Formatting (colors, fonts, etc.) - Formulas - Merged cells - Charts and images\nThis complexity can sometimes cause problems when reading data into R.\n\n\nInstalling the readxl Package\nUnlike CSV files, you need a special package to read Excel files. The readxl package is a reliable option:\n\n# Install the package (only need to do this once)\ninstall.packages(\"readxl\")\n\n# Load the package (need to do this each R session)\nlibrary(readxl)\n\n\n\nBasic Excel Reading\nOnce you have the readxl package loaded, reading Excel files is similar to reading CSV files:\n\n# Load the readxl package\nlibrary(readxl)\n\n# If Excel file is in the same folder as your script\ndata &lt;- read_excel(\"pset1.xlsx\")\n\n# If Excel file is in a subfolder called \"data\"\ndata &lt;- read_excel(\"data/pset1.xlsx\")\n\n# Check the data\nhead(data)\nstr(data)\n\n\n\nWorking with Multiple Sheets\nExcel files often have multiple sheets. Here’s how to handle them:\n\n# See what sheets are available\nexcel_sheets(\"data/pset1.xlsx\")\n\n# Read a specific sheet by name\ndata &lt;- read_excel(\"data/pset1.xlsx\", sheet = \"PSET 1 Data\")\n\n# Read a specific sheet by number (Sheet 1 = 1, Sheet 2 = 2, etc.)\ndata &lt;- read_excel(\"data/pset1.xlsx\", sheet = 1)\n\n# Read data starting from a specific row (skip headers or notes)\ndata &lt;- read_excel(\"data/pset1.xlsx\", skip = 2)\n\n\n\nHandling Excel Quirks\nExcel files can have formatting issues. Here are common solutions:\n\n# Skip empty rows and columns\ndata &lt;- read_excel(\"data/pset1.xlsx\", skip_empty_rows = TRUE)\n\n# Specify which columns to read (useful if there are extra columns)\ndata &lt;- read_excel(\"data/pset1.xlsx\", range = \"A1:E100\")\n\n# Handle different data types\ndata &lt;- read_excel(\"data/pset1.xlsx\",\n                   col_types = c(\"text\", \"numeric\", \"date\", \"numeric\"))\n\n\n\nWhen to Convert Excel to CSV Instead\nSometimes it’s easier to save your Excel file as a CSV first:\n\nOpen your Excel file\nGo to File &gt; Save As\nChoose “CSV (Comma delimited)” as the file type\nSave with a new name (e.g., “pset1.csv”)\nUse read.csv() instead\n\nThis approach avoids many Excel-specific problems and makes your code simpler."
  },
  {
    "objectID": "bonus_01.html#working-in-rstudio-bonus-section",
    "href": "bonus_01.html#working-in-rstudio-bonus-section",
    "title": "Working with Files and Directories in R",
    "section": "Working in RStudio (Bonus Section)",
    "text": "Working in RStudio (Bonus Section)\nIf you’re using RStudio (the most popular way to use R), you have some extra tools that make file management easier.\n\nThe Files Pane\nIn RStudio, look for the “Files” tab in the bottom-right panel. This is like a file explorer built into RStudio. You can:\n\nSee all files in your current directory\nClick on folders to navigate\nClick on data files to preview them\nUpload files from your computer\n\n\n\nSetting Your Working Directory the Easy Way\nIn RStudio, you can set your working directory using the menus instead of typing commands:\n\nGo to Session &gt; Set Working Directory &gt; Choose Directory\nNavigate to the folder containing your data files\nClick “Select Folder” or “Open”\n\nRStudio will run the setwd() command for you.\n\n\nThe Upload Button\nIf you’re using RStudio Cloud or RStudio Server, you can upload files directly:\n\nIn the Files pane, click the “Upload” button\nChoose your files from your computer\nClick “OK” to upload them to your current directory\n\n\n\nUsing the Files Pane to Build File Paths\nYou can use the Files pane to help build file paths:\n\nNavigate to your file in the Files pane\nClick on the file\nChoose “Import Dataset” for CSV/Excel files\nRStudio will show you the code needed to read the file"
  },
  {
    "objectID": "bonus_01.html#simple-file-organization-for-beginners",
    "href": "bonus_01.html#simple-file-organization-for-beginners",
    "title": "Working with Files and Directories in R",
    "section": "Simple File Organization for Beginners",
    "text": "Simple File Organization for Beginners\n\nThe One-Folder Approach\nWhen you’re starting out, keep it simple:\nMy_Analysis/\n├── my_script.R\n├── pset1.csv\n└── pset1.xlsx\nEverything in one folder means you can use simple filenames without complex paths.\n\n\nBasic Folder Structure (When You’re Ready)\nAs you get more comfortable, you might want a bit more organization:\nMy_Analysis/\n├── lab_01.qmd\n├── lab_02.qmd\n├── pset_01.qmd\n├── data/\n│   ├── pset1.csv\n│   └── pset1.xlsx\n└── _site/\n    └── (rendered HTML files)\nWith this structure, you’d read files like this:\n\n# Read files from the data folder\ndata &lt;- read.csv(\"data/pset1.csv\")\nexcel_data &lt;- read_excel(\"data/pset1.xlsx\")\n\n\n\nNaming Conventions\nUse clear, simple names for your files and folders:\n\nGood: survey_data.csv, analysis_script.R, final_report.qmd\nAvoid: data file (final version) - copy.csv, Script #1.R\n\nRules of thumb: - No spaces (use underscores or dashes instead) - No special characters (avoid !, @, #, etc.) - Use descriptive names - Be consistent"
  },
  {
    "objectID": "bonus_01.html#hands-on-practice",
    "href": "bonus_01.html#hands-on-practice",
    "title": "Working with Files and Directories in R",
    "section": "Hands-On Practice",
    "text": "Hands-On Practice\nLet’s practice with some real examples. For these exercises, create a folder on your computer called “R_Practice” and put some data files in it.\n\nExercise 1: Download and Read a CSV File\n\nCreate a folder called “R_Practice”\nDownload some course data files and save them in that folder\nOpen R and set your working directory to that folder\nTry reading the file:\n\n\n# Check where R is looking\ngetwd()\n\n# See what files are available\nlist.files()\n\n# Read the CSV file\nmy_data &lt;- read.csv(\"pset1.csv\") # obviously, use the actual name of *your* file\n\n# Check that it worked\nhead(my_data)\nstr(my_data)\n\n\n\nExercise 2: Practice with File Paths\nTry these commands to understand how file paths work:\n\n# See your current location\ngetwd()\n\n# List all files in the current directory\nlist.files()\n\n# List only CSV files\nlist.files(pattern = \"\\\\.csv$\")\n\n# Get information about your data file\nfile.info(\"pset1.csv\")\n\n\n\nExercise 3: Read an Excel File\n\nInstall and load the readxl package\nMake sure the Excel file “pset1.xlsx” is in your R_Practice folder\nTry reading it:\n\n\n# Install package (if needed)\n# install.packages(\"readxl\")\n\n# Load package\nlibrary(readxl)\n\n# Check what sheets are available\nexcel_sheets(\"pset1.xlsx\")\n\n# Read the Excel file\nexcel_data &lt;- read_excel(\"pset1.xlsx\")\n\n# Check the results\nhead(excel_data)\n\n\n\nTroubleshooting Walkthrough\nLet’s practice fixing common errors:\nError Message: “Error: path does not exist: ‘pset1.csv’”\nDebugging steps:\n\n# Step 1: Check where R is looking\ngetwd()\n\n# Step 2: See what files R can find\nlist.files()\n\n# Step 3: Look for your file specifically\nlist.files(pattern = \"csv\")\n\n# Step 4: If the file isn't there, either:\n# - Move the file to the current directory, or\n# - Change R's working directory to where the file is"
  },
  {
    "objectID": "bonus_01.html#common-problems-and-simple-solutions",
    "href": "bonus_01.html#common-problems-and-simple-solutions",
    "title": "Working with Files and Directories in R",
    "section": "Common Problems and Simple Solutions",
    "text": "Common Problems and Simple Solutions\n\n“Error: cannot open the connection”\nThis is the most common file-reading error. Here’s how to fix it:\nCheck 1: Is the file where R is looking?\n\ngetwd()          # Where is R looking?\nlist.files()     # What files can R see?\n\nCheck 2: Is the filename spelled correctly? - Check for typos - Check the file extension (.csv vs .xlsx) - Remember that R is case-sensitive (“pset1.csv” vs “PSET1.csv”)\nCheck 3: Are you using the right slashes?\n\n# Good\ndata &lt;- read.csv(\"pset1.csv\")\n\n# Also good - with subfolder\ndata &lt;- read.csv(\"data/pset1.csv\")\n\n# Also good - full path\ndata &lt;- read.csv(\"C:/Users/Hamlet/Documents/R_Practice/pset1.csv\")\n\n\n\n“No such file or directory”\nThis means R can’t find your file. Solutions:\n\nPut the file in R’s working directory (use getwd() to find it)\nUse the full file path (copy the complete address to your file)\nChange R’s working directory to where your file is located\n\n\n\nData Looks Weird After Loading\nProblem: Numbers show up as text, or you see strange characters\nSolutions:\n\n# For encoding problems (strange characters)\ndata &lt;- read.csv(\"data/pset1.csv\", encoding = \"UTF-8\")\n\n# For files that use semicolons instead of commas\ndata &lt;- read.csv(\"data/pset1.csv\", sep = \";\")\n\n# For files without headers\ndata &lt;- read.csv(\"data/pset1.csv\", header = FALSE)\n\n# For different missing value codes\ndata &lt;- read.csv(\"data/pset1.csv\", na.strings = c(\"\", \"NA\", \"-\", \"999\"))\n\n\n\n“Object Not Found” Error\nError: “Error: object ‘my_data’ not found”\nProblem: You forgot to assign your data to a variable\nSolution:\n\n# Wrong - just prints the data but doesn't save it\nread.csv(\"pset1.csv\")\n\n# Right - saves the data to a variable\nmy_data &lt;- read.csv(\"pset1.csv\")"
  },
  {
    "objectID": "bonus_01.html#key-takeaways-and-best-practices",
    "href": "bonus_01.html#key-takeaways-and-best-practices",
    "title": "Working with Files and Directories in R",
    "section": "Key Takeaways and Best Practices",
    "text": "Key Takeaways and Best Practices\n\nStart Simple\nWhen you’re learning: - Keep all files in one folder - Use simple, clear filenames - Check your data after every import\n\n\nEssential Commands to Remember\n\n# File management basics\ngetwd()                   # Where am I?\nlist.files()              # What files can R see?\nsetwd(\"path/to/folder\")   # Change location (if needed)\n\n# Reading data\ndata &lt;- read.csv(\"pset1.csv\")          # Read CSV\ndata &lt;- read.csv(\"data/pset1.csv\")     # Read CSV from subfolder\ndata &lt;- read_excel(\"data/pset1.xlsx\")  # Read Excel (needs readxl package)\n\n# Quick data checks\nhead(data)      # First few rows\nstr(data)       # Structure and data types\nnames(data)     # Column names\n\n\n\nWhen in Doubt\nIf you’re having file problems:\n\nPut everything in the same folder - your R script and your data files\nUse getwd() and list.files() to see what R can find\nCheck your spelling - filenames must be exact\nUse forward slashes in file paths, even on Windows"
  }
]